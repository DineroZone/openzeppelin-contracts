
> openzeppelin-solidity@2.0.0 test /home/mustang/Projects/openzeppelin-solidity
> scripts/test.sh

Starting our own ganache instance
Truffle v4.1.13 (core: 4.1.13)
Solidity v0.4.24 (solc-js)
Compiling ./contracts/access/Roles.sol...
Compiling ./contracts/access/roles/CapperRole.sol...
Compiling ./contracts/access/roles/MinterRole.sol...
Compiling ./contracts/access/roles/PauserRole.sol...
Compiling ./contracts/access/roles/SignerRole.sol...
Compiling ./contracts/crowdsale/Crowdsale.sol...
Compiling ./contracts/crowdsale/distribution/FinalizableCrowdsale.sol...
Compiling ./contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol...
Compiling ./contracts/crowdsale/distribution/RefundableCrowdsale.sol...
Compiling ./contracts/crowdsale/emission/AllowanceCrowdsale.sol...
Compiling ./contracts/crowdsale/emission/MintedCrowdsale.sol...
Compiling ./contracts/crowdsale/price/IncreasingPriceCrowdsale.sol...
Compiling ./contracts/crowdsale/validation/CappedCrowdsale.sol...
Compiling ./contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol...
Compiling ./contracts/crowdsale/validation/TimedCrowdsale.sol...
Compiling ./contracts/cryptography/ECDSA.sol...
Compiling ./contracts/cryptography/MerkleProof.sol...
Compiling ./contracts/drafts/Counter.sol...
Compiling ./contracts/drafts/ERC1046/TokenMetadata.sol...
Compiling ./contracts/drafts/ERC20Migrator.sol...
Compiling ./contracts/drafts/SignatureBouncer.sol...
Compiling ./contracts/drafts/TokenVesting.sol...
Compiling ./contracts/examples/SampleCrowdsale.sol...
Compiling ./contracts/examples/SimpleToken.sol...
Compiling ./contracts/introspection/ERC165.sol...
Compiling ./contracts/introspection/ERC165Checker.sol...
Compiling ./contracts/introspection/IERC165.sol...
Compiling ./contracts/lifecycle/Pausable.sol...
Compiling ./contracts/math/Math.sol...
Compiling ./contracts/math/SafeMath.sol...
Compiling ./contracts/mocks/Acknowledger.sol...
Compiling ./contracts/mocks/AddressImpl.sol...
Compiling ./contracts/mocks/AllowanceCrowdsaleImpl.sol...
Compiling ./contracts/mocks/ArraysImpl.sol...
Compiling ./contracts/mocks/CappedCrowdsaleImpl.sol...
Compiling ./contracts/mocks/CapperRoleMock.sol...
Compiling ./contracts/mocks/ConditionalEscrowMock.sol...
Compiling ./contracts/mocks/CounterImpl.sol...
Compiling ./contracts/mocks/CrowdsaleMock.sol...
Compiling ./contracts/mocks/DetailedERC20Mock.sol...
Compiling ./contracts/mocks/ECDSAMock.sol...
Compiling ./contracts/mocks/ERC165/ERC165InterfacesSupported.sol...
Compiling ./contracts/mocks/ERC165/ERC165NotSupported.sol...
Compiling ./contracts/mocks/ERC165CheckerMock.sol...
Compiling ./contracts/mocks/ERC165Mock.sol...
Compiling ./contracts/mocks/ERC20BurnableMock.sol...
Compiling ./contracts/mocks/ERC20MintableMock.sol...
Compiling ./contracts/mocks/ERC20Mock.sol...
Compiling ./contracts/mocks/ERC20PausableMock.sol...
Compiling ./contracts/mocks/ERC20WithMetadataMock.sol...
Compiling ./contracts/mocks/ERC721FullMock.sol...
Compiling ./contracts/mocks/ERC721MintableBurnableImpl.sol...
Compiling ./contracts/mocks/ERC721Mock.sol...
Compiling ./contracts/mocks/ERC721PausableMock.sol...
Compiling ./contracts/mocks/ERC721ReceiverMock.sol...
Compiling ./contracts/mocks/EventEmitter.sol...
Compiling ./contracts/mocks/Failer.sol...
Compiling ./contracts/mocks/FinalizableCrowdsaleImpl.sol...
Compiling ./contracts/mocks/IncreasingPriceCrowdsaleImpl.sol...
Compiling ./contracts/mocks/IndividuallyCappedCrowdsaleImpl.sol...
Compiling ./contracts/mocks/MathMock.sol...
Compiling ./contracts/mocks/MerkleProofWrapper.sol...
Compiling ./contracts/mocks/MintedCrowdsaleImpl.sol...
Compiling ./contracts/mocks/MinterRoleMock.sol...
Compiling ./contracts/mocks/OwnableInterfaceId.sol...
Compiling ./contracts/mocks/OwnableMock.sol...
Compiling ./contracts/mocks/PausableMock.sol...
Compiling ./contracts/mocks/PauserRoleMock.sol...
Compiling ./contracts/mocks/PostDeliveryCrowdsaleImpl.sol...
Compiling ./contracts/mocks/PullPaymentMock.sol...
Compiling ./contracts/mocks/ReentrancyAttack.sol...
Compiling ./contracts/mocks/ReentrancyMock.sol...
Compiling ./contracts/mocks/RefundableCrowdsaleImpl.sol...
Compiling ./contracts/mocks/RolesMock.sol...
Compiling ./contracts/mocks/SafeERC20Helper.sol...
Compiling ./contracts/mocks/SafeMathMock.sol...
Compiling ./contracts/mocks/SecondaryMock.sol...
Compiling ./contracts/mocks/SignatureBouncerMock.sol...
Compiling ./contracts/mocks/SignerRoleMock.sol...
Compiling ./contracts/mocks/TimedCrowdsaleImpl.sol...
Compiling ./contracts/ownership/Ownable.sol...
Compiling ./contracts/ownership/Secondary.sol...
Compiling ./contracts/payment/PaymentSplitter.sol...
Compiling ./contracts/payment/PullPayment.sol...
Compiling ./contracts/payment/escrow/ConditionalEscrow.sol...
Compiling ./contracts/payment/escrow/Escrow.sol...
Compiling ./contracts/payment/escrow/RefundEscrow.sol...
Compiling ./contracts/token/ERC20/ERC20.sol...
Compiling ./contracts/token/ERC20/ERC20Burnable.sol...
Compiling ./contracts/token/ERC20/ERC20Capped.sol...
Compiling ./contracts/token/ERC20/ERC20Detailed.sol...
Compiling ./contracts/token/ERC20/ERC20Mintable.sol...
Compiling ./contracts/token/ERC20/ERC20Pausable.sol...
Compiling ./contracts/token/ERC20/IERC20.sol...
Compiling ./contracts/token/ERC20/SafeERC20.sol...
Compiling ./contracts/token/ERC20/TokenTimelock.sol...
Compiling ./contracts/token/ERC721/ERC721.sol...
Compiling ./contracts/token/ERC721/ERC721Burnable.sol...
Compiling ./contracts/token/ERC721/ERC721Enumerable.sol...
Compiling ./contracts/token/ERC721/ERC721Full.sol...
Compiling ./contracts/token/ERC721/ERC721Holder.sol...
Compiling ./contracts/token/ERC721/ERC721Metadata.sol...
Compiling ./contracts/token/ERC721/ERC721MetadataMintable.sol...
Compiling ./contracts/token/ERC721/ERC721Mintable.sol...
Compiling ./contracts/token/ERC721/ERC721Pausable.sol...
Compiling ./contracts/token/ERC721/IERC721.sol...
Compiling ./contracts/token/ERC721/IERC721Enumerable.sol...
Compiling ./contracts/token/ERC721/IERC721Full.sol...
Compiling ./contracts/token/ERC721/IERC721Metadata.sol...
Compiling ./contracts/token/ERC721/IERC721Receiver.sol...
Compiling ./contracts/utils/Address.sol...
Compiling ./contracts/utils/Arrays.sol...
Compiling ./contracts/utils/ReentrancyGuard.sol...

Compilation warnings encountered:

/home/mustang/Projects/openzeppelin-solidity/contracts/drafts/Counter.sol:16:5: Warning: This declaration shadows an existing declaration.
    struct Counter {
    ^ (Relevant source part starts here and spans across multiple lines).
/home/mustang/Projects/openzeppelin-solidity/contracts/drafts/Counter.sol:15:1: The shadowed declaration is here:
library Counter {
^ (Relevant source part starts here and spans across multiple lines).

,/home/mustang/Projects/openzeppelin-solidity/contracts/drafts/ERC20Migrator.sol:70:29: Warning: This declaration shadows an existing declaration.
    function beginMigration(ERC20Mintable newToken) public {
                            ^--------------------^
/home/mustang/Projects/openzeppelin-solidity/contracts/drafts/ERC20Migrator.sol:61:5: The shadowed declaration is here:
    function newToken() public view returns (IERC20) {
    ^ (Relevant source part starts here and spans across multiple lines).

,/home/mustang/Projects/openzeppelin-solidity/contracts/examples/SimpleToken.sol:13:46: Warning: Initial value for constant variable has to be compile-time constant. This will fail to compile with the next breaking version change.
    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals()));
                                             ^---------------------------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:155:36: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
                                   ^-----------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:155:57: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
                                                        ^---------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:182:37: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
                                    ^-----------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:182:58: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
                                                         ^---------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol:88:32: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function withdrawalAllowed(address payee) public view returns (bool) {
                               ^-----------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:145:5: Warning: Function state mutability can be restricted to pure
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:155:5: Warning: Function state mutability can be restricted to pure
    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol:182:5: Warning: Function state mutability can be restricted to pure
    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol:48:5: Warning: Function state mutability can be restricted to pure
    function _finalization() internal {}
    ^----------------------------------^
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:9:5: Warning: Function state mutability can be restricted to pure
    function transfer(address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:13:5: Warning: Function state mutability can be restricted to pure
    function transferFrom(address, address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:17:5: Warning: Function state mutability can be restricted to pure
    function approve(address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:21:5: Warning: Function state mutability can be restricted to pure
    function allowance(address, address) public view returns (uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:29:5: Warning: Function state mutability can be restricted to pure
    function transfer(address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:33:5: Warning: Function state mutability can be restricted to pure
    function transferFrom(address, address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
,/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/SafeERC20Helper.sol:37:5: Warning: Function state mutability can be restricted to pure
    function approve(address, uint256) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).


[0m[0m
[0m  shouldFail[0m
[0m    reverting[0m
[0m      reverting.withMessage[0m
Context {
  _runnable:
   Test {
     title: 'accepts a revert with an expected reason',
     fn: [AsyncFunction],
     body:
      "async function () {\n        console.log(this)\n        await shouldFail.reverting.withMessage(this.failer.failWithRevertReason('Doomed to fail'), 'Doomed to fail');\n      }",
     async: 0,
     sync: true,
     _timeout: 2000,
     _slow: 75,
     _enableTimeouts: true,
     timedOut: false,
     _trace:
      Error: done() called multiple times
          at Test.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
          at new Test (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/test.js:28:12)
          at context.it.context.specify (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:86:18)
          at Function.context.it.only (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:97:46)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:68:10)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:63:5)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:46:3)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
          at Module._compile (internal/modules/cjs/loader.js:722:30)
          at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
          at Module.load (internal/modules/cjs/loader.js:620:32)
          at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
          at Function.Module._load (internal/modules/cjs/loader.js:552:3)
          at Module.require (internal/modules/cjs/loader.js:658:17)
          at require (internal/modules/cjs/helpers.js:22:18)
          at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
          at Array.forEach (<anonymous>)
          at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
          at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
          at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
     _retries: -1,
     _currentRetry: 0,
     pending: false,
     type: 'test',
     file:
      '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js',
     parent:
      Suite {
        title: 'reverting.withMessage',
        ctx: [Circular],
        suites: [],
        tests: [ [Circular] ],
        pending: false,
        _beforeEach: [],
        _beforeAll: [],
        _afterEach: [],
        _afterAll: [],
        root: false,
        _timeout: 2000,
        _enableTimeouts: true,
        _slow: 75,
        _bail: undefined,
        _retries: -1,
        _onlyTests: [ [Circular] ],
        _onlySuites: [],
        delayed: false,
        parent:
         Suite {
           title: 'reverting',
           ctx: Context {},
           suites: [ [Circular] ],
           tests: [],
           pending: false,
           _beforeEach: [],
           _beforeAll: [],
           _afterEach: [],
           _afterAll: [],
           root: false,
           _timeout: 2000,
           _enableTimeouts: true,
           _slow: 75,
           _bail: undefined,
           _retries: -1,
           _onlyTests: [],
           _onlySuites: [],
           delayed: false,
           parent:
            Suite {
              title: 'shouldFail',
              ctx:
               Context {
                 _runnable:
                  Hook {
                    title: '"before each" hook',
                    fn: [AsyncFunction],
                    body:
                     'async function () {\n    this.failer = await Failer.new();\n  }',
                    async: 0,
                    sync: true,
                    _timeout: 2000,
                    _slow: 75,
                    _enableTimeouts: true,
                    timedOut: false,
                    _trace:
                     Error: done() called multiple times
                         at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                         at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                         at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                         at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                         at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                         at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                         at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                         at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                         at Module._compile (internal/modules/cjs/loader.js:722:30)
                         at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                         at Module.load (internal/modules/cjs/loader.js:620:32)
                         at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                         at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                         at Module.require (internal/modules/cjs/loader.js:658:17)
                         at require (internal/modules/cjs/helpers.js:22:18)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                         at Array.forEach (<anonymous>)
                         at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                         at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                    _retries: -1,
                    _currentRetry: 0,
                    pending: false,
                    type: 'hook',
                    parent: [Circular],
                    ctx: [Circular],
                    _events: [Object: null prototype] { error: [Function] },
                    _eventsCount: 1,
                    callback: [Function: done],
                    timer:
                     Timeout {
                       _idleTimeout: -1,
                       _idlePrev: null,
                       _idleNext: null,
                       _idleStart: 14602,
                       _onTimeout: null,
                       _timerArgs: undefined,
                       _repeat: null,
                       _destroyed: false,
                       [Symbol(refed)]: null,
                       [Symbol(asyncId)]: 2071,
                       [Symbol(triggerId)]: 2067 },
                    duration: 96,
                    _error: null },
                 test:
                  Hook {
                    title: '"before each" hook',
                    fn: [AsyncFunction],
                    body:
                     'async function () {\n    this.failer = await Failer.new();\n  }',
                    async: 0,
                    sync: true,
                    _timeout: 2000,
                    _slow: 75,
                    _enableTimeouts: true,
                    timedOut: false,
                    _trace:
                     Error: done() called multiple times
                         at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                         at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                         at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                         at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                         at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                         at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                         at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                         at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                         at Module._compile (internal/modules/cjs/loader.js:722:30)
                         at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                         at Module.load (internal/modules/cjs/loader.js:620:32)
                         at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                         at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                         at Module.require (internal/modules/cjs/loader.js:658:17)
                         at require (internal/modules/cjs/helpers.js:22:18)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                         at Array.forEach (<anonymous>)
                         at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                         at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                    _retries: -1,
                    _currentRetry: 0,
                    pending: false,
                    type: 'hook',
                    parent: [Circular],
                    ctx: [Circular],
                    _events: [Object: null prototype] { error: [Function] },
                    _eventsCount: 1,
                    callback: [Function: done],
                    timer:
                     Timeout {
                       _idleTimeout: -1,
                       _idlePrev: null,
                       _idleNext: null,
                       _idleStart: 14602,
                       _onTimeout: null,
                       _timerArgs: undefined,
                       _repeat: null,
                       _destroyed: false,
                       [Symbol(refed)]: null,
                       [Symbol(asyncId)]: 2071,
                       [Symbol(triggerId)]: 2067 },
                    duration: 96,
                    _error: null },
                 failer:
                  TruffleContract {
                    constructor:
                     { [Function: TruffleContract]
                       _static_methods:
                        { setProvider: [Function: setProvider],
                          new: [Function: new],
                          at: [Function: at],
                          deployed: [Function: deployed],
                          defaults: [Function: defaults],
                          hasNetwork: [Function: hasNetwork],
                          isDeployed: [Function: isDeployed],
                          detectNetwork: [Function: detectNetwork],
                          setNetwork: [Function: setNetwork],
                          resetAddress: [Function: resetAddress],
                          link: [Function: link],
                          clone: [Function: clone],
                          addProp: [Function: addProp],
                          toJSON: [Function: toJSON] },
                       _properties:
                        { contract_name: { get: [Function: get], set: [Function: set] },
                          contractName: { get: [Function: get], set: [Function: set] },
                          abi: { get: [Function: get], set: [Function: set] },
                          network: [Function: network],
                          networks: [Function: networks],
                          address: { get: [Function: get], set: [Function: set] },
                          transactionHash: { get: [Function: get], set: [Function: set] },
                          links: [Function: links],
                          events: [Function: events],
                          binary: [Function: binary],
                          deployedBinary: [Function: deployedBinary],
                          unlinked_binary: { get: [Function: get], set: [Function: set] },
                          bytecode: { get: [Function: get], set: [Function: set] },
                          deployedBytecode: { get: [Function: get], set: [Function: set] },
                          sourceMap: { get: [Function: get], set: [Function: set] },
                          deployedSourceMap: { get: [Function: get], set: [Function: set] },
                          source: { get: [Function: get], set: [Function: set] },
                          sourcePath: { get: [Function: get], set: [Function: set] },
                          legacyAST: { get: [Function: get], set: [Function: set] },
                          ast: { get: [Function: get], set: [Function: set] },
                          compiler: { get: [Function: get], set: [Function: set] },
                          schema_version: [Function: schema_version],
                          schemaVersion: [Function: schemaVersion],
                          updated_at: [Function: updated_at],
                          updatedAt: [Function: updatedAt] },
                       _property_values: {},
                       _json:
                        { contractName: 'Failer',
                          abi:
                           [ { constant: true,
                               inputs: [],
                               name: 'dontFail',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failWithRevert',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [ { name: '_reason', type: 'string' } ],
                               name: 'failWithRevertReason',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failWithThrow',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: false,
                               inputs: [],
                               name: 'failWithOutOfGas',
                               outputs: [],
                               payable: false,
                               stateMutability: 'nonpayable',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failRequirement',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failRequirementVocally',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' } ],
                          bytecode:
                           '0x608060405234801561001057600080fd5b50610345806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                          deployedBytecode:
                           '0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                          sourceMap:
                           '26:637:56:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:637:56;;;;;;;',
                          deployedSourceMap:
                           '26:637:56:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:39:56;;;;;;192:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;192:90:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;493:70:56;;;;;;288:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;288:67:56;;;;;;361:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;361:126:56;;;;;;123:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;123:63:56;;;;;;569:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;569:92:56;;;;;;78:39;:::o;192:90::-;267:7;260:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;260:15:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;550:5;542:14;;;;;;;;493:70::o;288:67::-;342:5;335:13;;;;;;288:67::o;361:126::-;411:9;423:1;411:13;;406:75;430:6;426:1;:10;406:75;;;457:5;468:1;457:13;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;457:13:56;;;;;;;;;;;;;;;;;;;;;;438:3;;;;;406:75;;;361:126;:::o;123:63::-;171:8;;;569:92;633:5;625:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;569:92::o',
                          source:
                           'pragma solidity ^0.4.24;\n\ncontract Failer {\n    uint256[] private array;\n\n    function dontFail() public pure {\n    }\n\n    function failWithRevert() public pure {\n        revert();\n    }\n\n    function failWithRevertReason(string _reason) public pure {\n        revert(_reason);\n    }\n\n    function failWithThrow() public pure {\n        assert(false);\n    }\n\n    function failWithOutOfGas() public {\n        for (uint256 i = 0; i < 2**200; ++i) {\n            array.push(i);\n        }\n    }\n\n    function failRequirement() public pure {\n        require(false);\n    }\n\n    function failRequirementVocally() public pure {\n        require(false, "Unsatisfied");\n    }\n}\n',
                          sourcePath:
                           '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                          ast:
                           { absolutePath:
                              '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                             exportedSymbols: { Failer: [ 4245 ] },
                             id: 4246,
                             nodeType: 'SourceUnit',
                             nodes:
                              [ { id: 4171,
                                  literals: [ 'solidity', '^', '0.4', '.24' ],
                                  nodeType: 'PragmaDirective',
                                  src: '0:24:56' },
                                { baseContracts: [],
                                  contractDependencies: [],
                                  contractKind: 'contract',
                                  documentation: null,
                                  fullyImplemented: true,
                                  id: 4245,
                                  linearizedBaseContracts: [ 4245 ],
                                  name: 'Failer',
                                  nodeType: 'ContractDefinition',
                                  nodes:
                                   [ { constant: false,
                                       id: 4174,
                                       name: 'array',
                                       nodeType: 'VariableDeclaration',
                                       scope: 4245,
                                       src: '48:23:56',
                                       stateVariable: true,
                                       storageLocation: 'default',
                                       typeDescriptions:
                                        { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                          typeString: 'uint256[]' },
                                       typeName:
                                        { baseType:
                                           { id: 4172,
                                             name: 'uint256',
                                             nodeType: 'ElementaryTypeName',
                                             src: '48:7:56',
                                             typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                          id: 4173,
                                          length: null,
                                          nodeType: 'ArrayTypeName',
                                          src: '48:9:56',
                                          typeDescriptions:
                                           { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                             typeString: 'uint256[]' } },
                                       value: null,
                                       visibility: 'private' },
                                     { body:
                                        { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                       documentation: null,
                                       id: 4178,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'dontFail',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4175,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '95:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4176,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '110:0:56' },
                                       scope: 4245,
                                       src: '78:39:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4184,
                                          nodeType: 'Block',
                                          src: '161:25:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments: [],
                                                  expression:
                                                   { argumentTypes: [],
                                                     id: 4181,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8751,
                                                     src: '171:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$__$returns$__$',
                                                        typeString: 'function () pure' } },
                                                  id: 4182,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '171:8:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4183,
                                               nodeType: 'ExpressionStatement',
                                               src: '171:8:56' } ] },
                                       documentation: null,
                                       id: 4185,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevert',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4179,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '146:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4180,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '161:0:56' },
                                       scope: 4245,
                                       src: '123:63:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4194,
                                          nodeType: 'Block',
                                          src: '250:32:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       id: 4191,
                                                       name: '_reason',
                                                       nodeType: 'Identifier',
                                                       overloadedDeclarations: [],
                                                       referencedDeclaration: 4187,
                                                       src: '267:7:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } ],
                                                     id: 4190,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8752,
                                                     src: '260:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (string memory) pure' } },
                                                  id: 4192,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '260:15:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4193,
                                               nodeType: 'ExpressionStatement',
                                               src: '260:15:56' } ] },
                                       documentation: null,
                                       id: 4195,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevertReason',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4188,
                                          nodeType: 'ParameterList',
                                          parameters:
                                           [ { constant: false,
                                               id: 4187,
                                               name: '_reason',
                                               nodeType: 'VariableDeclaration',
                                               scope: 4195,
                                               src: '222:14:56',
                                               stateVariable: false,
                                               storageLocation: 'default',
                                               typeDescriptions:
                                                { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                               typeName:
                                                { id: 4186,
                                                  name: 'string',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '222:6:56',
                                                  typeDescriptions:
                                                   { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                               value: null,
                                               visibility: 'internal' } ],
                                          src: '221:16:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4189,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '250:0:56' },
                                       scope: 4245,
                                       src: '192:90:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4202,
                                          nodeType: 'Block',
                                          src: '325:30:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4199,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '342:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4198,
                                                     name: 'assert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 8735,
                                                     src: '335:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_assert_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4200,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '335:13:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4201,
                                               nodeType: 'ExpressionStatement',
                                               src: '335:13:56' } ] },
                                       documentation: null,
                                       id: 4203,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithThrow',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4196,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '310:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4197,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '325:0:56' },
                                       scope: 4245,
                                       src: '288:67:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4226,
                                          nodeType: 'Block',
                                          src: '396:91:56',
                                          statements:
                                           [ { body:
                                                { id: 4224,
                                                  nodeType: 'Block',
                                                  src: '443:38:56',
                                                  statements:
                                                   [ { expression:
                                                        { argumentTypes: null,
                                                          arguments: [Array],
                                                          expression: [Object],
                                                          id: 4222,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          kind: 'functionCall',
                                                          lValueRequested: false,
                                                          names: [],
                                                          nodeType: 'FunctionCall',
                                                          src: '457:13:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4223,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '457:13:56' } ] },
                                               condition:
                                                { argumentTypes: null,
                                                  commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                  id: 4214,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  lValueRequested: false,
                                                  leftExpression:
                                                   { argumentTypes: null,
                                                     id: 4210,
                                                     name: 'i',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 4207,
                                                     src: '426:1:56',
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  nodeType: 'BinaryOperation',
                                                  operator: '<',
                                                  rightExpression:
                                                   { argumentTypes: null,
                                                     commonType:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' },
                                                     id: 4213,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     lValueRequested: false,
                                                     leftExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '32',
                                                        id: 4211,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '430:1:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_2_by_1',
                                                           typeString: 'int_const 2' },
                                                        value: '2' },
                                                     nodeType: 'BinaryOperation',
                                                     operator: '**',
                                                     rightExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '323030',
                                                        id: 4212,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '433:3:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_200_by_1',
                                                           typeString: 'int_const 200' },
                                                        value: '200' },
                                                     src: '430:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' } },
                                                  src: '426:10:56',
                                                  typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                               id: 4225,
                                               initializationExpression:
                                                { assignments: [ 4207 ],
                                                  declarations:
                                                   [ { constant: false,
                                                       id: 4207,
                                                       name: 'i',
                                                       nodeType: 'VariableDeclaration',
                                                       scope: 4227,
                                                       src: '411:9:56',
                                                       stateVariable: false,
                                                       storageLocation: 'default',
                                                       typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       typeName:
                                                        { id: 4206,
                                                          name: 'uint256',
                                                          nodeType: 'ElementaryTypeName',
                                                          src: '411:7:56',
                                                          typeDescriptions: [Object] },
                                                       value: null,
                                                       visibility: 'internal' } ],
                                                  id: 4209,
                                                  initialValue:
                                                   { argumentTypes: null,
                                                     hexValue: '30',
                                                     id: 4208,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     kind: 'number',
                                                     lValueRequested: false,
                                                     nodeType: 'Literal',
                                                     src: '423:1:56',
                                                     subdenomination: null,
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_rational_0_by_1',
                                                        typeString: 'int_const 0' },
                                                     value: '0' },
                                                  nodeType: 'VariableDeclarationStatement',
                                                  src: '411:13:56' },
                                               loopExpression:
                                                { expression:
                                                   { argumentTypes: null,
                                                     id: 4216,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: false,
                                                     lValueRequested: false,
                                                     nodeType: 'UnaryOperation',
                                                     operator: '++',
                                                     prefix: true,
                                                     src: '438:3:56',
                                                     subExpression:
                                                      { argumentTypes: null,
                                                        id: 4215,
                                                        name: 'i',
                                                        nodeType: 'Identifier',
                                                        overloadedDeclarations: [],
                                                        referencedDeclaration: 4207,
                                                        src: '440:1:56',
                                                        typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  id: 4217,
                                                  nodeType: 'ExpressionStatement',
                                                  src: '438:3:56' },
                                               nodeType: 'ForStatement',
                                               src: '406:75:56' } ] },
                                       documentation: null,
                                       id: 4227,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: false,
                                       modifiers: [],
                                       name: 'failWithOutOfGas',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4204,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '386:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4205,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '396:0:56' },
                                       scope: 4245,
                                       src: '361:126:56',
                                       stateMutability: 'nonpayable',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4234,
                                          nodeType: 'Block',
                                          src: '532:31:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4231,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '550:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4230,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8749,
                                                     src: '542:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_require_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4232,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '542:14:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4233,
                                               nodeType: 'ExpressionStatement',
                                               src: '542:14:56' } ] },
                                       documentation: null,
                                       id: 4235,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirement',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4228,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '517:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4229,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '532:0:56' },
                                       scope: 4245,
                                       src: '493:70:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4243,
                                          nodeType: 'Block',
                                          src: '615:46:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4239,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '633:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' },
                                                     { argumentTypes: null,
                                                       hexValue: '556e736174697366696564',
                                                       id: 4240,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'string',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '640:13:56',
                                                       subdenomination: null,
                                                       typeDescriptions:
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' },
                                                       value: 'Unsatisfied' } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_bool', typeString: 'bool' },
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' } ],
                                                     id: 4238,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8750,
                                                     src: '625:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (bool,string memory) pure' } },
                                                  id: 4241,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '625:29:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4242,
                                               nodeType: 'ExpressionStatement',
                                               src: '625:29:56' } ] },
                                       documentation: null,
                                       id: 4244,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirementVocally',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4236,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '600:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4237,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '615:0:56' },
                                       scope: 4245,
                                       src: '569:92:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' } ],
                                  scope: 4246,
                                  src: '26:637:56' } ],
                             src: '0:664:56' },
                          legacyAST:
                           { absolutePath:
                              '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                             exportedSymbols: { Failer: [ 4245 ] },
                             id: 4246,
                             nodeType: 'SourceUnit',
                             nodes:
                              [ { id: 4171,
                                  literals: [ 'solidity', '^', '0.4', '.24' ],
                                  nodeType: 'PragmaDirective',
                                  src: '0:24:56' },
                                { baseContracts: [],
                                  contractDependencies: [],
                                  contractKind: 'contract',
                                  documentation: null,
                                  fullyImplemented: true,
                                  id: 4245,
                                  linearizedBaseContracts: [ 4245 ],
                                  name: 'Failer',
                                  nodeType: 'ContractDefinition',
                                  nodes:
                                   [ { constant: false,
                                       id: 4174,
                                       name: 'array',
                                       nodeType: 'VariableDeclaration',
                                       scope: 4245,
                                       src: '48:23:56',
                                       stateVariable: true,
                                       storageLocation: 'default',
                                       typeDescriptions:
                                        { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                          typeString: 'uint256[]' },
                                       typeName:
                                        { baseType:
                                           { id: 4172,
                                             name: 'uint256',
                                             nodeType: 'ElementaryTypeName',
                                             src: '48:7:56',
                                             typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                          id: 4173,
                                          length: null,
                                          nodeType: 'ArrayTypeName',
                                          src: '48:9:56',
                                          typeDescriptions:
                                           { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                             typeString: 'uint256[]' } },
                                       value: null,
                                       visibility: 'private' },
                                     { body:
                                        { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                       documentation: null,
                                       id: 4178,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'dontFail',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4175,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '95:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4176,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '110:0:56' },
                                       scope: 4245,
                                       src: '78:39:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4184,
                                          nodeType: 'Block',
                                          src: '161:25:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments: [],
                                                  expression:
                                                   { argumentTypes: [],
                                                     id: 4181,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8751,
                                                     src: '171:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$__$returns$__$',
                                                        typeString: 'function () pure' } },
                                                  id: 4182,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '171:8:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4183,
                                               nodeType: 'ExpressionStatement',
                                               src: '171:8:56' } ] },
                                       documentation: null,
                                       id: 4185,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevert',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4179,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '146:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4180,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '161:0:56' },
                                       scope: 4245,
                                       src: '123:63:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4194,
                                          nodeType: 'Block',
                                          src: '250:32:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       id: 4191,
                                                       name: '_reason',
                                                       nodeType: 'Identifier',
                                                       overloadedDeclarations: [],
                                                       referencedDeclaration: 4187,
                                                       src: '267:7:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } ],
                                                     id: 4190,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8752,
                                                     src: '260:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (string memory) pure' } },
                                                  id: 4192,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '260:15:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4193,
                                               nodeType: 'ExpressionStatement',
                                               src: '260:15:56' } ] },
                                       documentation: null,
                                       id: 4195,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevertReason',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4188,
                                          nodeType: 'ParameterList',
                                          parameters:
                                           [ { constant: false,
                                               id: 4187,
                                               name: '_reason',
                                               nodeType: 'VariableDeclaration',
                                               scope: 4195,
                                               src: '222:14:56',
                                               stateVariable: false,
                                               storageLocation: 'default',
                                               typeDescriptions:
                                                { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                               typeName:
                                                { id: 4186,
                                                  name: 'string',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '222:6:56',
                                                  typeDescriptions:
                                                   { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                               value: null,
                                               visibility: 'internal' } ],
                                          src: '221:16:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4189,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '250:0:56' },
                                       scope: 4245,
                                       src: '192:90:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4202,
                                          nodeType: 'Block',
                                          src: '325:30:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4199,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '342:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4198,
                                                     name: 'assert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 8735,
                                                     src: '335:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_assert_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4200,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '335:13:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4201,
                                               nodeType: 'ExpressionStatement',
                                               src: '335:13:56' } ] },
                                       documentation: null,
                                       id: 4203,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithThrow',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4196,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '310:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4197,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '325:0:56' },
                                       scope: 4245,
                                       src: '288:67:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4226,
                                          nodeType: 'Block',
                                          src: '396:91:56',
                                          statements:
                                           [ { body:
                                                { id: 4224,
                                                  nodeType: 'Block',
                                                  src: '443:38:56',
                                                  statements:
                                                   [ { expression:
                                                        { argumentTypes: null,
                                                          arguments: [Array],
                                                          expression: [Object],
                                                          id: 4222,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          kind: 'functionCall',
                                                          lValueRequested: false,
                                                          names: [],
                                                          nodeType: 'FunctionCall',
                                                          src: '457:13:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4223,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '457:13:56' } ] },
                                               condition:
                                                { argumentTypes: null,
                                                  commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                  id: 4214,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  lValueRequested: false,
                                                  leftExpression:
                                                   { argumentTypes: null,
                                                     id: 4210,
                                                     name: 'i',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 4207,
                                                     src: '426:1:56',
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  nodeType: 'BinaryOperation',
                                                  operator: '<',
                                                  rightExpression:
                                                   { argumentTypes: null,
                                                     commonType:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' },
                                                     id: 4213,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     lValueRequested: false,
                                                     leftExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '32',
                                                        id: 4211,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '430:1:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_2_by_1',
                                                           typeString: 'int_const 2' },
                                                        value: '2' },
                                                     nodeType: 'BinaryOperation',
                                                     operator: '**',
                                                     rightExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '323030',
                                                        id: 4212,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '433:3:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_200_by_1',
                                                           typeString: 'int_const 200' },
                                                        value: '200' },
                                                     src: '430:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' } },
                                                  src: '426:10:56',
                                                  typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                               id: 4225,
                                               initializationExpression:
                                                { assignments: [ 4207 ],
                                                  declarations:
                                                   [ { constant: false,
                                                       id: 4207,
                                                       name: 'i',
                                                       nodeType: 'VariableDeclaration',
                                                       scope: 4227,
                                                       src: '411:9:56',
                                                       stateVariable: false,
                                                       storageLocation: 'default',
                                                       typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       typeName:
                                                        { id: 4206,
                                                          name: 'uint256',
                                                          nodeType: 'ElementaryTypeName',
                                                          src: '411:7:56',
                                                          typeDescriptions: [Object] },
                                                       value: null,
                                                       visibility: 'internal' } ],
                                                  id: 4209,
                                                  initialValue:
                                                   { argumentTypes: null,
                                                     hexValue: '30',
                                                     id: 4208,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     kind: 'number',
                                                     lValueRequested: false,
                                                     nodeType: 'Literal',
                                                     src: '423:1:56',
                                                     subdenomination: null,
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_rational_0_by_1',
                                                        typeString: 'int_const 0' },
                                                     value: '0' },
                                                  nodeType: 'VariableDeclarationStatement',
                                                  src: '411:13:56' },
                                               loopExpression:
                                                { expression:
                                                   { argumentTypes: null,
                                                     id: 4216,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: false,
                                                     lValueRequested: false,
                                                     nodeType: 'UnaryOperation',
                                                     operator: '++',
                                                     prefix: true,
                                                     src: '438:3:56',
                                                     subExpression:
                                                      { argumentTypes: null,
                                                        id: 4215,
                                                        name: 'i',
                                                        nodeType: 'Identifier',
                                                        overloadedDeclarations: [],
                                                        referencedDeclaration: 4207,
                                                        src: '440:1:56',
                                                        typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  id: 4217,
                                                  nodeType: 'ExpressionStatement',
                                                  src: '438:3:56' },
                                               nodeType: 'ForStatement',
                                               src: '406:75:56' } ] },
                                       documentation: null,
                                       id: 4227,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: false,
                                       modifiers: [],
                                       name: 'failWithOutOfGas',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4204,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '386:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4205,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '396:0:56' },
                                       scope: 4245,
                                       src: '361:126:56',
                                       stateMutability: 'nonpayable',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4234,
                                          nodeType: 'Block',
                                          src: '532:31:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4231,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '550:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4230,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8749,
                                                     src: '542:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_require_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4232,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '542:14:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4233,
                                               nodeType: 'ExpressionStatement',
                                               src: '542:14:56' } ] },
                                       documentation: null,
                                       id: 4235,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirement',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4228,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '517:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4229,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '532:0:56' },
                                       scope: 4245,
                                       src: '493:70:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4243,
                                          nodeType: 'Block',
                                          src: '615:46:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4239,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '633:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' },
                                                     { argumentTypes: null,
                                                       hexValue: '556e736174697366696564',
                                                       id: 4240,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'string',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '640:13:56',
                                                       subdenomination: null,
                                                       typeDescriptions:
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' },
                                                       value: 'Unsatisfied' } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_bool', typeString: 'bool' },
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' } ],
                                                     id: 4238,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8750,
                                                     src: '625:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (bool,string memory) pure' } },
                                                  id: 4241,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '625:29:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4242,
                                               nodeType: 'ExpressionStatement',
                                               src: '625:29:56' } ] },
                                       documentation: null,
                                       id: 4244,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirementVocally',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4236,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '600:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4237,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '615:0:56' },
                                       scope: 4245,
                                       src: '569:92:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' } ],
                                  scope: 4246,
                                  src: '26:637:56' } ],
                             src: '0:664:56' },
                          compiler:
                           { name: 'solc',
                             version: '0.4.24+commit.e67f0147.Emscripten.clang' },
                          networks: {},
                          schemaVersion: '2.0.1',
                          updatedAt: '2018-12-10T01:06:43.859Z' },
                       setProvider: [Function: bound setProvider],
                       new: [Function: bound new],
                       at: [Function: bound at],
                       deployed: [Function: bound deployed],
                       defaults: [Function: bound defaults],
                       hasNetwork: [Function: bound hasNetwork],
                       isDeployed: [Function: bound isDeployed],
                       detectNetwork: [Function: bound detectNetwork],
                       setNetwork: [Function: bound setNetwork],
                       resetAddress: [Function: bound resetAddress],
                       link: [Function: bound link],
                       clone: [Function: bound clone],
                       addProp: [Function: bound addProp],
                       toJSON: [Function: bound toJSON],
                       web3:
                        Web3 {
                          _requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:8545',
                                   timeout: 0,
                                   user: undefined,
                                   password: undefined,
                                   headers: undefined,
                                   send: [Function],
                                   sendAsync: [Function],
                                   _alreadyWrapped: true } },
                             polls: {},
                             timeout: null },
                          currentProvider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:8545',
                                timeout: 0,
                                user: undefined,
                                password: undefined,
                                headers: undefined,
                                send: [Function],
                                sendAsync: [Function],
                                _alreadyWrapped: true } },
                          eth:
                           Eth {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             getBalance:
                              { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                             getStorageAt:
                              { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                             getCode:
                              { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                             getBlock:
                              { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                             getUncle:
                              { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                             getCompilers:
                              { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                             getBlockTransactionCount:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: getBlockTransactionCountCall] },
                             getBlockUncleCount:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: uncleCountCall] },
                             getTransaction:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'eth_getTransactionByHash' },
                             getTransactionFromBlock:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: transactionFromBlockCall] },
                             getTransactionReceipt:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'eth_getTransactionReceipt' },
                             getTransactionCount:
                              { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                             call:
                              { [Function: send] request: [Function: bound ], call: 'eth_call' },
                             estimateGas:
                              { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                             sendRawTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                             signTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                             sendTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                             sign:
                              { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                             compile:
                              { solidity:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                lll:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                serpent:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                             submitWork:
                              { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                             getWork:
                              { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                             coinbase: [Getter],
                             getCoinbase: { [Function: get] request: [Function: bound ] },
                             mining: [Getter],
                             getMining: { [Function: get] request: [Function: bound ] },
                             hashrate: [Getter],
                             getHashrate: { [Function: get] request: [Function: bound ] },
                             syncing: [Getter],
                             getSyncing: { [Function: get] request: [Function: bound ] },
                             gasPrice: [Getter],
                             getGasPrice: { [Function: get] request: [Function: bound ] },
                             accounts: [Getter],
                             getAccounts: { [Function: get] request: [Function: bound ] },
                             blockNumber: [Getter],
                             getBlockNumber: { [Function: get] request: [Function: bound ] },
                             protocolVersion: [Getter],
                             getProtocolVersion: { [Function: get] request: [Function: bound ] },
                             iban:
                              { [Function: Iban]
                                fromAddress: [Function],
                                fromBban: [Function],
                                createIndirect: [Function],
                                isValid: [Function] },
                             sendIBANTransaction: [Function: bound transfer] },
                          db:
                           DB {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             putString:
                              { [Function: send] request: [Function: bound ], call: 'db_putString' },
                             getString:
                              { [Function: send] request: [Function: bound ], call: 'db_getString' },
                             putHex:
                              { [Function: send] request: [Function: bound ], call: 'db_putHex' },
                             getHex:
                              { [Function: send] request: [Function: bound ], call: 'db_getHex' } },
                          shh:
                           Shh {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             version:
                              { [Function: send] request: [Function: bound ], call: 'shh_version' },
                             info:
                              { [Function: send] request: [Function: bound ], call: 'shh_info' },
                             setMaxMessageSize:
                              { [Function: send] request: [Function: bound ], call: 'shh_setMaxMessageSize' },
                             setMinPoW:
                              { [Function: send] request: [Function: bound ], call: 'shh_setMinPoW' },
                             markTrustedPeer:
                              { [Function: send] request: [Function: bound ], call: 'shh_markTrustedPeer' },
                             newKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_newKeyPair' },
                             addPrivateKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_addPrivateKey' },
                             deleteKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_deleteKeyPair' },
                             hasKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_hasKeyPair' },
                             getPublicKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getPublicKey' },
                             getPrivateKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getPrivateKey' },
                             newSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_newSymKey' },
                             addSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_addSymKey' },
                             generateSymKeyFromPassword:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'shh_generateSymKeyFromPassword' },
                             hasSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_hasSymKey' },
                             getSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getSymKey' },
                             deleteSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_deleteSymKey' },
                             post:
                              { [Function: send] request: [Function: bound ], call: 'shh_post' } },
                          net:
                           Net {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             listening: [Getter],
                             getListening: { [Function: get] request: [Function: bound ] },
                             peerCount: [Getter],
                             getPeerCount: { [Function: get] request: [Function: bound ] } },
                          personal:
                           Personal {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             newAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_newAccount' },
                             importRawKey:
                              { [Function: send] request: [Function: bound ], call: 'personal_importRawKey' },
                             unlockAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_unlockAccount' },
                             ecRecover:
                              { [Function: send] request: [Function: bound ], call: 'personal_ecRecover' },
                             sign:
                              { [Function: send] request: [Function: bound ], call: 'personal_sign' },
                             sendTransaction:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'personal_sendTransaction' },
                             lockAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_lockAccount' },
                             listAccounts: [Getter],
                             getListAccounts: { [Function: get] request: [Function: bound ] } },
                          bzz:
                           Swarm {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             blockNetworkRead:
                              { [Function: send] request: [Function: bound ], call: 'bzz_blockNetworkRead' },
                             syncEnabled:
                              { [Function: send] request: [Function: bound ], call: 'bzz_syncEnabled' },
                             swapEnabled:
                              { [Function: send] request: [Function: bound ], call: 'bzz_swapEnabled' },
                             download:
                              { [Function: send] request: [Function: bound ], call: 'bzz_download' },
                             upload:
                              { [Function: send] request: [Function: bound ], call: 'bzz_upload' },
                             retrieve:
                              { [Function: send] request: [Function: bound ], call: 'bzz_retrieve' },
                             store:
                              { [Function: send] request: [Function: bound ], call: 'bzz_store' },
                             get:
                              { [Function: send] request: [Function: bound ], call: 'bzz_get' },
                             put:
                              { [Function: send] request: [Function: bound ], call: 'bzz_put' },
                             modify:
                              { [Function: send] request: [Function: bound ], call: 'bzz_modify' },
                             hive: [Getter],
                             getHive: { [Function: get] request: [Function: bound ] },
                             info: [Getter],
                             getInfo: { [Function: get] request: [Function: bound ] } },
                          settings:
                           Settings { defaultBlock: 'latest', defaultAccount: undefined },
                          version:
                           { api: '0.20.6',
                             node: [Getter],
                             getNode: { [Function: get] request: [Function: bound ] },
                             network: [Getter],
                             getNetwork: { [Function: get] request: [Function: bound ] },
                             ethereum: [Getter],
                             getEthereum: { [Function: get] request: [Function: bound ] },
                             whisper: [Getter],
                             getWhisper: { [Function: get] request: [Function: bound ] } },
                          providers:
                           { HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          _extend:
                           { [Function: ex]
                             formatters:
                              { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                                inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                                inputCallFormatter: [Function: inputCallFormatter],
                                inputTransactionFormatter: [Function: inputTransactionFormatter],
                                inputAddressFormatter: [Function: inputAddressFormatter],
                                inputPostFormatter: [Function: inputPostFormatter],
                                outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                                outputTransactionFormatter: [Function: outputTransactionFormatter],
                                outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                                outputBlockFormatter: [Function: outputBlockFormatter],
                                outputLogFormatter: [Function: outputLogFormatter],
                                outputPostFormatter: [Function: outputPostFormatter],
                                outputSyncingFormatter: [Function: outputSyncingFormatter] },
                             utils:
                              { padLeft: [Function: padLeft],
                                padRight: [Function: padRight],
                                toHex: [Function: toHex],
                                toDecimal: [Function: toDecimal],
                                fromDecimal: [Function: fromDecimal],
                                toUtf8: [Function: toUtf8],
                                toAscii: [Function: toAscii],
                                fromUtf8: [Function: fromUtf8],
                                fromAscii: [Function: fromAscii],
                                transformToFullName: [Function: transformToFullName],
                                extractDisplayName: [Function: extractDisplayName],
                                extractTypeName: [Function: extractTypeName],
                                toWei: [Function: toWei],
                                fromWei: [Function: fromWei],
                                toBigNumber: [Function: toBigNumber],
                                toTwosComplement: [Function: toTwosComplement],
                                toAddress: [Function: toAddress],
                                isBigNumber: [Function: isBigNumber],
                                isStrictAddress: [Function: isStrictAddress],
                                isAddress: [Function: isAddress],
                                isChecksumAddress: [Function: isChecksumAddress],
                                toChecksumAddress: [Function: toChecksumAddress],
                                isFunction: [Function: isFunction],
                                isString: [Function: isString],
                                isObject: [Function: isObject],
                                isBoolean: [Function: isBoolean],
                                isArray: [Function: isArray],
                                isJson: [Function: isJson],
                                isBloom: [Function: isBloom],
                                isTopic: [Function: isTopic] },
                             Method: [Function: Method],
                             Property: [Function: Property] } },
                       class_defaults:
                        { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',
                          gas: 6721975,
                          gasPrice: 100000000000 },
                       currentProvider:
                        HttpProvider {
                          host: 'http://localhost:8545',
                          timeout: 0,
                          user: undefined,
                          password: undefined,
                          headers: undefined,
                          send: [Function],
                          sendAsync: [Function],
                          _alreadyWrapped: true },
                       network_id: '1544403995460' },
                    abi:
                     [ { constant: true,
                         inputs: [],
                         name: 'dontFail',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failWithRevert',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [ { name: '_reason', type: 'string' } ],
                         name: 'failWithRevertReason',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failWithThrow',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: false,
                         inputs: [],
                         name: 'failWithOutOfGas',
                         outputs: [],
                         payable: false,
                         stateMutability: 'nonpayable',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failRequirement',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failRequirementVocally',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' } ],
                    contract:
                     Contract {
                       _eth:
                        Eth {
                          _requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:8545',
                                   timeout: 0,
                                   user: undefined,
                                   password: undefined,
                                   headers: undefined,
                                   send: [Function],
                                   sendAsync: [Function],
                                   _alreadyWrapped: true } },
                             polls: {},
                             timeout: null },
                          getBalance:
                           { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                          getStorageAt:
                           { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                          getCode:
                           { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                          getBlock:
                           { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                          getUncle:
                           { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                          getCompilers:
                           { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                          getBlockTransactionCount:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: getBlockTransactionCountCall] },
                          getBlockUncleCount:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: uncleCountCall] },
                          getTransaction:
                           { [Function: send]
                             request: [Function: bound ],
                             call: 'eth_getTransactionByHash' },
                          getTransactionFromBlock:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: transactionFromBlockCall] },
                          getTransactionReceipt:
                           { [Function: send]
                             request: [Function: bound ],
                             call: 'eth_getTransactionReceipt' },
                          getTransactionCount:
                           { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                          call:
                           { [Function: send] request: [Function: bound ], call: 'eth_call' },
                          estimateGas:
                           { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                          sendRawTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                          signTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                          sendTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                          sign:
                           { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                          compile:
                           { solidity:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                             lll:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                             serpent:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                          submitWork:
                           { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                          getWork:
                           { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                          coinbase: [Getter],
                          getCoinbase: { [Function: get] request: [Function: bound ] },
                          mining: [Getter],
                          getMining: { [Function: get] request: [Function: bound ] },
                          hashrate: [Getter],
                          getHashrate: { [Function: get] request: [Function: bound ] },
                          syncing: [Getter],
                          getSyncing: { [Function: get] request: [Function: bound ] },
                          gasPrice: [Getter],
                          getGasPrice: { [Function: get] request: [Function: bound ] },
                          accounts: [Getter],
                          getAccounts: { [Function: get] request: [Function: bound ] },
                          blockNumber: [Getter],
                          getBlockNumber: { [Function: get] request: [Function: bound ] },
                          protocolVersion: [Getter],
                          getProtocolVersion: { [Function: get] request: [Function: bound ] },
                          iban:
                           { [Function: Iban]
                             fromAddress: [Function],
                             fromBban: [Function],
                             createIndirect: [Function],
                             isValid: [Function] },
                          sendIBANTransaction: [Function: bound transfer] },
                       transactionHash:
                        '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b',
                       address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                       abi:
                        [ { constant: true,
                            inputs: [],
                            name: 'dontFail',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failWithRevert',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [ { name: '_reason', type: 'string' } ],
                            name: 'failWithRevertReason',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failWithThrow',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: false,
                            inputs: [],
                            name: 'failWithOutOfGas',
                            outputs: [],
                            payable: false,
                            stateMutability: 'nonpayable',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failRequirement',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failRequirementVocally',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' } ],
                       dontFail:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithRevert:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithRevertReason:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          string: [Circular] },
                       failWithThrow:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithOutOfGas:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failRequirement:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failRequirementVocally:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       allEvents: [Function: bound ] },
                    dontFail:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithRevert:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithRevertReason:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithThrow:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithOutOfGas:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failRequirement:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failRequirementVocally:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    sendTransaction: [Function],
                    send: [Function],
                    allEvents: [Function: bound ],
                    address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                    transactionHash:
                     '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b' } },
              suites: [ [Circular] ],
              tests: [],
              pending: false,
              _beforeEach:
               [ Hook {
                   title: '"before each" hook',
                   fn: [AsyncFunction],
                   body:
                    'async function () {\n    this.failer = await Failer.new();\n  }',
                   async: 0,
                   sync: true,
                   _timeout: 2000,
                   _slow: 75,
                   _enableTimeouts: true,
                   timedOut: false,
                   _trace:
                    Error: done() called multiple times
                        at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                        at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                        at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                        at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                        at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                        at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                        at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                        at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                        at Module._compile (internal/modules/cjs/loader.js:722:30)
                        at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                        at Module.load (internal/modules/cjs/loader.js:620:32)
                        at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                        at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                        at Module.require (internal/modules/cjs/loader.js:658:17)
                        at require (internal/modules/cjs/helpers.js:22:18)
                        at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                        at Array.forEach (<anonymous>)
                        at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                        at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                        at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                   _retries: -1,
                   _currentRetry: 0,
                   pending: false,
                   type: 'hook',
                   parent: [Circular],
                   ctx:
                    Context {
                      _runnable: [Circular],
                      test: [Circular],
                      failer:
                       TruffleContract {
                         constructor:
                          { [Function: TruffleContract]
                            _static_methods:
                             { setProvider: [Function: setProvider],
                               new: [Function: new],
                               at: [Function: at],
                               deployed: [Function: deployed],
                               defaults: [Function: defaults],
                               hasNetwork: [Function: hasNetwork],
                               isDeployed: [Function: isDeployed],
                               detectNetwork: [Function: detectNetwork],
                               setNetwork: [Function: setNetwork],
                               resetAddress: [Function: resetAddress],
                               link: [Function: link],
                               clone: [Function: clone],
                               addProp: [Function: addProp],
                               toJSON: [Function: toJSON] },
                            _properties:
                             { contract_name: { get: [Function: get], set: [Function: set] },
                               contractName: { get: [Function: get], set: [Function: set] },
                               abi: { get: [Function: get], set: [Function: set] },
                               network: [Function: network],
                               networks: [Function: networks],
                               address: { get: [Function: get], set: [Function: set] },
                               transactionHash: { get: [Function: get], set: [Function: set] },
                               links: [Function: links],
                               events: [Function: events],
                               binary: [Function: binary],
                               deployedBinary: [Function: deployedBinary],
                               unlinked_binary: { get: [Function: get], set: [Function: set] },
                               bytecode: { get: [Function: get], set: [Function: set] },
                               deployedBytecode: { get: [Function: get], set: [Function: set] },
                               sourceMap: { get: [Function: get], set: [Function: set] },
                               deployedSourceMap: { get: [Function: get], set: [Function: set] },
                               source: { get: [Function: get], set: [Function: set] },
                               sourcePath: { get: [Function: get], set: [Function: set] },
                               legacyAST: { get: [Function: get], set: [Function: set] },
                               ast: { get: [Function: get], set: [Function: set] },
                               compiler: { get: [Function: get], set: [Function: set] },
                               schema_version: [Function: schema_version],
                               schemaVersion: [Function: schemaVersion],
                               updated_at: [Function: updated_at],
                               updatedAt: [Function: updatedAt] },
                            _property_values: {},
                            _json:
                             { contractName: 'Failer',
                               abi:
                                [ { constant: true,
                                    inputs: [],
                                    name: 'dontFail',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failWithRevert',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [ { name: '_reason', type: 'string' } ],
                                    name: 'failWithRevertReason',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failWithThrow',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: false,
                                    inputs: [],
                                    name: 'failWithOutOfGas',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'nonpayable',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failRequirement',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failRequirementVocally',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' } ],
                               bytecode:
                                '0x608060405234801561001057600080fd5b50610345806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                               deployedBytecode:
                                '0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                               sourceMap:
                                '26:637:56:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:637:56;;;;;;;',
                               deployedSourceMap:
                                '26:637:56:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:39:56;;;;;;192:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;192:90:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;493:70:56;;;;;;288:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;288:67:56;;;;;;361:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;361:126:56;;;;;;123:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;123:63:56;;;;;;569:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;569:92:56;;;;;;78:39;:::o;192:90::-;267:7;260:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;260:15:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;550:5;542:14;;;;;;;;493:70::o;288:67::-;342:5;335:13;;;;;;288:67::o;361:126::-;411:9;423:1;411:13;;406:75;430:6;426:1;:10;406:75;;;457:5;468:1;457:13;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;457:13:56;;;;;;;;;;;;;;;;;;;;;;438:3;;;;;406:75;;;361:126;:::o;123:63::-;171:8;;;569:92;633:5;625:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;569:92::o',
                               source:
                                'pragma solidity ^0.4.24;\n\ncontract Failer {\n    uint256[] private array;\n\n    function dontFail() public pure {\n    }\n\n    function failWithRevert() public pure {\n        revert();\n    }\n\n    function failWithRevertReason(string _reason) public pure {\n        revert(_reason);\n    }\n\n    function failWithThrow() public pure {\n        assert(false);\n    }\n\n    function failWithOutOfGas() public {\n        for (uint256 i = 0; i < 2**200; ++i) {\n            array.push(i);\n        }\n    }\n\n    function failRequirement() public pure {\n        require(false);\n    }\n\n    function failRequirementVocally() public pure {\n        require(false, "Unsatisfied");\n    }\n}\n',
                               sourcePath:
                                '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                               ast:
                                { absolutePath:
                                   '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                                  exportedSymbols: { Failer: [ 4245 ] },
                                  id: 4246,
                                  nodeType: 'SourceUnit',
                                  nodes:
                                   [ { id: 4171,
                                       literals: [ 'solidity', '^', '0.4', '.24' ],
                                       nodeType: 'PragmaDirective',
                                       src: '0:24:56' },
                                     { baseContracts: [],
                                       contractDependencies: [],
                                       contractKind: 'contract',
                                       documentation: null,
                                       fullyImplemented: true,
                                       id: 4245,
                                       linearizedBaseContracts: [ 4245 ],
                                       name: 'Failer',
                                       nodeType: 'ContractDefinition',
                                       nodes:
                                        [ { constant: false,
                                            id: 4174,
                                            name: 'array',
                                            nodeType: 'VariableDeclaration',
                                            scope: 4245,
                                            src: '48:23:56',
                                            stateVariable: true,
                                            storageLocation: 'default',
                                            typeDescriptions:
                                             { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                               typeString: 'uint256[]' },
                                            typeName:
                                             { baseType:
                                                { id: 4172,
                                                  name: 'uint256',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '48:7:56',
                                                  typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                               id: 4173,
                                               length: null,
                                               nodeType: 'ArrayTypeName',
                                               src: '48:9:56',
                                               typeDescriptions:
                                                { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                                  typeString: 'uint256[]' } },
                                            value: null,
                                            visibility: 'private' },
                                          { body:
                                             { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                            documentation: null,
                                            id: 4178,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'dontFail',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4175,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '95:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4176,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '110:0:56' },
                                            scope: 4245,
                                            src: '78:39:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4184,
                                               nodeType: 'Block',
                                               src: '161:25:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [],
                                                       expression:
                                                        { argumentTypes: [],
                                                          id: 4181,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8751,
                                                          src: '171:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4182,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '171:8:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4183,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '171:8:56' } ] },
                                            documentation: null,
                                            id: 4185,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevert',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4179,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '146:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4180,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '161:0:56' },
                                            scope: 4245,
                                            src: '123:63:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4194,
                                               nodeType: 'Block',
                                               src: '250:32:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4190,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8752,
                                                          src: '260:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4192,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '260:15:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4193,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '260:15:56' } ] },
                                            documentation: null,
                                            id: 4195,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevertReason',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4188,
                                               nodeType: 'ParameterList',
                                               parameters:
                                                [ { constant: false,
                                                    id: 4187,
                                                    name: '_reason',
                                                    nodeType: 'VariableDeclaration',
                                                    scope: 4195,
                                                    src: '222:14:56',
                                                    stateVariable: false,
                                                    storageLocation: 'default',
                                                    typeDescriptions:
                                                     { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                                    typeName:
                                                     { id: 4186,
                                                       name: 'string',
                                                       nodeType: 'ElementaryTypeName',
                                                       src: '222:6:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                                    value: null,
                                                    visibility: 'internal' } ],
                                               src: '221:16:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4189,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '250:0:56' },
                                            scope: 4245,
                                            src: '192:90:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4202,
                                               nodeType: 'Block',
                                               src: '325:30:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4198,
                                                          name: 'assert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 8735,
                                                          src: '335:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4200,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '335:13:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4201,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '335:13:56' } ] },
                                            documentation: null,
                                            id: 4203,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithThrow',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4196,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '310:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4197,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '325:0:56' },
                                            scope: 4245,
                                            src: '288:67:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4226,
                                               nodeType: 'Block',
                                               src: '396:91:56',
                                               statements:
                                                [ { body:
                                                     { id: 4224,
                                                       nodeType: 'Block',
                                                       src: '443:38:56',
                                                       statements: [ [Object] ] },
                                                    condition:
                                                     { argumentTypes: null,
                                                       commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       id: 4214,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       lValueRequested: false,
                                                       leftExpression:
                                                        { argumentTypes: null,
                                                          id: 4210,
                                                          name: 'i',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 4207,
                                                          src: '426:1:56',
                                                          typeDescriptions: [Object] },
                                                       nodeType: 'BinaryOperation',
                                                       operator: '<',
                                                       rightExpression:
                                                        { argumentTypes: null,
                                                          commonType: [Object],
                                                          id: 4213,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          lValueRequested: false,
                                                          leftExpression: [Object],
                                                          nodeType: 'BinaryOperation',
                                                          operator: '**',
                                                          rightExpression: [Object],
                                                          src: '430:6:56',
                                                          typeDescriptions: [Object] },
                                                       src: '426:10:56',
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                                    id: 4225,
                                                    initializationExpression:
                                                     { assignments: [ 4207 ],
                                                       declarations: [ [Object] ],
                                                       id: 4209,
                                                       initialValue:
                                                        { argumentTypes: null,
                                                          hexValue: '30',
                                                          id: 4208,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          kind: 'number',
                                                          lValueRequested: false,
                                                          nodeType: 'Literal',
                                                          src: '423:1:56',
                                                          subdenomination: null,
                                                          typeDescriptions: [Object],
                                                          value: '0' },
                                                       nodeType: 'VariableDeclarationStatement',
                                                       src: '411:13:56' },
                                                    loopExpression:
                                                     { expression:
                                                        { argumentTypes: null,
                                                          id: 4216,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          lValueRequested: false,
                                                          nodeType: 'UnaryOperation',
                                                          operator: '++',
                                                          prefix: true,
                                                          src: '438:3:56',
                                                          subExpression: [Object],
                                                          typeDescriptions: [Object] },
                                                       id: 4217,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '438:3:56' },
                                                    nodeType: 'ForStatement',
                                                    src: '406:75:56' } ] },
                                            documentation: null,
                                            id: 4227,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: false,
                                            modifiers: [],
                                            name: 'failWithOutOfGas',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4204,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '386:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4205,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '396:0:56' },
                                            scope: 4245,
                                            src: '361:126:56',
                                            stateMutability: 'nonpayable',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4234,
                                               nodeType: 'Block',
                                               src: '532:31:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4230,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8749,
                                                          src: '542:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4232,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '542:14:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4233,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '542:14:56' } ] },
                                            documentation: null,
                                            id: 4235,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirement',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4228,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '517:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4229,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '532:0:56' },
                                            scope: 4245,
                                            src: '493:70:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4243,
                                               nodeType: 'Block',
                                               src: '615:46:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object], [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4238,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8750,
                                                          src: '625:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4241,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '625:29:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4242,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '625:29:56' } ] },
                                            documentation: null,
                                            id: 4244,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirementVocally',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4236,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '600:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4237,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '615:0:56' },
                                            scope: 4245,
                                            src: '569:92:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' } ],
                                       scope: 4246,
                                       src: '26:637:56' } ],
                                  src: '0:664:56' },
                               legacyAST:
                                { absolutePath:
                                   '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                                  exportedSymbols: { Failer: [ 4245 ] },
                                  id: 4246,
                                  nodeType: 'SourceUnit',
                                  nodes:
                                   [ { id: 4171,
                                       literals: [ 'solidity', '^', '0.4', '.24' ],
                                       nodeType: 'PragmaDirective',
                                       src: '0:24:56' },
                                     { baseContracts: [],
                                       contractDependencies: [],
                                       contractKind: 'contract',
                                       documentation: null,
                                       fullyImplemented: true,
                                       id: 4245,
                                       linearizedBaseContracts: [ 4245 ],
                                       name: 'Failer',
                                       nodeType: 'ContractDefinition',
                                       nodes:
                                        [ { constant: false,
                                            id: 4174,
                                            name: 'array',
                                            nodeType: 'VariableDeclaration',
                                            scope: 4245,
                                            src: '48:23:56',
                                            stateVariable: true,
                                            storageLocation: 'default',
                                            typeDescriptions:
                                             { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                               typeString: 'uint256[]' },
                                            typeName:
                                             { baseType:
                                                { id: 4172,
                                                  name: 'uint256',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '48:7:56',
                                                  typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                               id: 4173,
                                               length: null,
                                               nodeType: 'ArrayTypeName',
                                               src: '48:9:56',
                                               typeDescriptions:
                                                { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                                  typeString: 'uint256[]' } },
                                            value: null,
                                            visibility: 'private' },
                                          { body:
                                             { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                            documentation: null,
                                            id: 4178,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'dontFail',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4175,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '95:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4176,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '110:0:56' },
                                            scope: 4245,
                                            src: '78:39:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4184,
                                               nodeType: 'Block',
                                               src: '161:25:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [],
                                                       expression:
                                                        { argumentTypes: [],
                                                          id: 4181,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8751,
                                                          src: '171:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4182,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '171:8:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4183,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '171:8:56' } ] },
                                            documentation: null,
                                            id: 4185,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevert',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4179,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '146:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4180,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '161:0:56' },
                                            scope: 4245,
                                            src: '123:63:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4194,
                                               nodeType: 'Block',
                                               src: '250:32:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4190,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8752,
                                                          src: '260:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4192,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '260:15:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4193,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '260:15:56' } ] },
                                            documentation: null,
                                            id: 4195,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevertReason',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4188,
                                               nodeType: 'ParameterList',
                                               parameters:
                                                [ { constant: false,
                                                    id: 4187,
                                                    name: '_reason',
                                                    nodeType: 'VariableDeclaration',
                                                    scope: 4195,
                                                    src: '222:14:56',
                                                    stateVariable: false,
                                                    storageLocation: 'default',
                                                    typeDescriptions:
                                                     { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                                    typeName:
                                                     { id: 4186,
                                                       name: 'string',
                                                       nodeType: 'ElementaryTypeName',
                                                       src: '222:6:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                                    value: null,
                                                    visibility: 'internal' } ],
                                               src: '221:16:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4189,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '250:0:56' },
                                            scope: 4245,
                                            src: '192:90:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4202,
                                               nodeType: 'Block',
                                               src: '325:30:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4198,
                                                          name: 'assert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 8735,
                                                          src: '335:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4200,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '335:13:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4201,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '335:13:56' } ] },
                                            documentation: null,
                                            id: 4203,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithThrow',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4196,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '310:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4197,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '325:0:56' },
                                            scope: 4245,
                                            src: '288:67:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4226,
                                               nodeType: 'Block',
                                               src: '396:91:56',
                                               statements:
                                                [ { body:
                                                     { id: 4224,
                                                       nodeType: 'Block',
                                                       src: '443:38:56',
                                                       statements: [ [Object] ] },
                                                    condition:
                                                     { argumentTypes: null,
                                                       commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       id: 4214,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       lValueRequested: false,
                                                       leftExpression:
                                                        { argumentTypes: null,
                                                          id: 4210,
                                                          name: 'i',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 4207,
                                                          src: '426:1:56',
                                                          typeDescriptions: [Object] },
                                                       nodeType: 'BinaryOperation',
                                                       operator: '<',
                                                       rightExpression:
                                                        { argumentTypes: null,
                                                          commonType: [Object],
                                                          id: 4213,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          lValueRequested: false,
                                                          leftExpression: [Object],
                                                          nodeType: 'BinaryOperation',
                                                          operator: '**',
                                                          rightExpression: [Object],
                                                          src: '430:6:56',
                                                          typeDescriptions: [Object] },
                                                       src: '426:10:56',
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                                    id: 4225,
                                                    initializationExpression:
                                                     { assignments: [ 4207 ],
                                                       declarations: [ [Object] ],
                                                       id: 4209,
                                                       initialValue:
                                                        { argumentTypes: null,
                                                          hexValue: '30',
                                                          id: 4208,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          kind: 'number',
                                                          lValueRequested: false,
                                                          nodeType: 'Literal',
                                                          src: '423:1:56',
                                                          subdenomination: null,
                                                          typeDescriptions: [Object],
                                                          value: '0' },
                                                       nodeType: 'VariableDeclarationStatement',
                                                       src: '411:13:56' },
                                                    loopExpression:
                                                     { expression:
                                                        { argumentTypes: null,
                                                          id: 4216,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          lValueRequested: false,
                                                          nodeType: 'UnaryOperation',
                                                          operator: '++',
                                                          prefix: true,
                                                          src: '438:3:56',
                                                          subExpression: [Object],
                                                          typeDescriptions: [Object] },
                                                       id: 4217,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '438:3:56' },
                                                    nodeType: 'ForStatement',
                                                    src: '406:75:56' } ] },
                                            documentation: null,
                                            id: 4227,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: false,
                                            modifiers: [],
                                            name: 'failWithOutOfGas',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4204,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '386:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4205,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '396:0:56' },
                                            scope: 4245,
                                            src: '361:126:56',
                                            stateMutability: 'nonpayable',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4234,
                                               nodeType: 'Block',
                                               src: '532:31:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4230,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8749,
                                                          src: '542:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4232,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '542:14:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4233,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '542:14:56' } ] },
                                            documentation: null,
                                            id: 4235,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirement',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4228,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '517:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4229,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '532:0:56' },
                                            scope: 4245,
                                            src: '493:70:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4243,
                                               nodeType: 'Block',
                                               src: '615:46:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object], [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4238,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8750,
                                                          src: '625:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4241,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '625:29:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4242,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '625:29:56' } ] },
                                            documentation: null,
                                            id: 4244,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirementVocally',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4236,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '600:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4237,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '615:0:56' },
                                            scope: 4245,
                                            src: '569:92:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' } ],
                                       scope: 4246,
                                       src: '26:637:56' } ],
                                  src: '0:664:56' },
                               compiler:
                                { name: 'solc',
                                  version: '0.4.24+commit.e67f0147.Emscripten.clang' },
                               networks: {},
                               schemaVersion: '2.0.1',
                               updatedAt: '2018-12-10T01:06:43.859Z' },
                            setProvider: [Function: bound setProvider],
                            new: [Function: bound new],
                            at: [Function: bound at],
                            deployed: [Function: bound deployed],
                            defaults: [Function: bound defaults],
                            hasNetwork: [Function: bound hasNetwork],
                            isDeployed: [Function: bound isDeployed],
                            detectNetwork: [Function: bound detectNetwork],
                            setNetwork: [Function: bound setNetwork],
                            resetAddress: [Function: bound resetAddress],
                            link: [Function: bound link],
                            clone: [Function: bound clone],
                            addProp: [Function: bound addProp],
                            toJSON: [Function: bound toJSON],
                            web3:
                             Web3 {
                               _requestManager:
                                RequestManager {
                                  provider:
                                   Provider {
                                     provider:
                                      HttpProvider {
                                        host: 'http://localhost:8545',
                                        timeout: 0,
                                        user: undefined,
                                        password: undefined,
                                        headers: undefined,
                                        send: [Function],
                                        sendAsync: [Function],
                                        _alreadyWrapped: true } },
                                  polls: {},
                                  timeout: null },
                               currentProvider:
                                Provider {
                                  provider:
                                   HttpProvider {
                                     host: 'http://localhost:8545',
                                     timeout: 0,
                                     user: undefined,
                                     password: undefined,
                                     headers: undefined,
                                     send: [Function],
                                     sendAsync: [Function],
                                     _alreadyWrapped: true } },
                               eth:
                                Eth {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  getBalance:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                                  getStorageAt:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                                  getCode:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                                  getBlock:
                                   { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                                  getUncle:
                                   { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                                  getCompilers:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                                  getBlockTransactionCount:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: getBlockTransactionCountCall] },
                                  getBlockUncleCount:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: uncleCountCall] },
                                  getTransaction:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'eth_getTransactionByHash' },
                                  getTransactionFromBlock:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: transactionFromBlockCall] },
                                  getTransactionReceipt:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'eth_getTransactionReceipt' },
                                  getTransactionCount:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                                  call:
                                   { [Function: send] request: [Function: bound ], call: 'eth_call' },
                                  estimateGas:
                                   { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                                  sendRawTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                                  signTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                                  sendTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                                  sign:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                                  compile:
                                   { solidity:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                     lll:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                     serpent:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                                  submitWork:
                                   { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                                  getWork:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                                  coinbase: [Getter],
                                  getCoinbase: { [Function: get] request: [Function: bound ] },
                                  mining: [Getter],
                                  getMining: { [Function: get] request: [Function: bound ] },
                                  hashrate: [Getter],
                                  getHashrate: { [Function: get] request: [Function: bound ] },
                                  syncing: [Getter],
                                  getSyncing: { [Function: get] request: [Function: bound ] },
                                  gasPrice: [Getter],
                                  getGasPrice: { [Function: get] request: [Function: bound ] },
                                  accounts: [Getter],
                                  getAccounts: { [Function: get] request: [Function: bound ] },
                                  blockNumber: [Getter],
                                  getBlockNumber: { [Function: get] request: [Function: bound ] },
                                  protocolVersion: [Getter],
                                  getProtocolVersion: { [Function: get] request: [Function: bound ] },
                                  iban:
                                   { [Function: Iban]
                                     fromAddress: [Function],
                                     fromBban: [Function],
                                     createIndirect: [Function],
                                     isValid: [Function] },
                                  sendIBANTransaction: [Function: bound transfer] },
                               db:
                                DB {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  putString:
                                   { [Function: send] request: [Function: bound ], call: 'db_putString' },
                                  getString:
                                   { [Function: send] request: [Function: bound ], call: 'db_getString' },
                                  putHex:
                                   { [Function: send] request: [Function: bound ], call: 'db_putHex' },
                                  getHex:
                                   { [Function: send] request: [Function: bound ], call: 'db_getHex' } },
                               shh:
                                Shh {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  version:
                                   { [Function: send] request: [Function: bound ], call: 'shh_version' },
                                  info:
                                   { [Function: send] request: [Function: bound ], call: 'shh_info' },
                                  setMaxMessageSize:
                                   { [Function: send] request: [Function: bound ], call: 'shh_setMaxMessageSize' },
                                  setMinPoW:
                                   { [Function: send] request: [Function: bound ], call: 'shh_setMinPoW' },
                                  markTrustedPeer:
                                   { [Function: send] request: [Function: bound ], call: 'shh_markTrustedPeer' },
                                  newKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_newKeyPair' },
                                  addPrivateKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_addPrivateKey' },
                                  deleteKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_deleteKeyPair' },
                                  hasKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_hasKeyPair' },
                                  getPublicKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getPublicKey' },
                                  getPrivateKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getPrivateKey' },
                                  newSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_newSymKey' },
                                  addSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_addSymKey' },
                                  generateSymKeyFromPassword:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'shh_generateSymKeyFromPassword' },
                                  hasSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_hasSymKey' },
                                  getSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getSymKey' },
                                  deleteSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_deleteSymKey' },
                                  post:
                                   { [Function: send] request: [Function: bound ], call: 'shh_post' } },
                               net:
                                Net {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  listening: [Getter],
                                  getListening: { [Function: get] request: [Function: bound ] },
                                  peerCount: [Getter],
                                  getPeerCount: { [Function: get] request: [Function: bound ] } },
                               personal:
                                Personal {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  newAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_newAccount' },
                                  importRawKey:
                                   { [Function: send] request: [Function: bound ], call: 'personal_importRawKey' },
                                  unlockAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_unlockAccount' },
                                  ecRecover:
                                   { [Function: send] request: [Function: bound ], call: 'personal_ecRecover' },
                                  sign:
                                   { [Function: send] request: [Function: bound ], call: 'personal_sign' },
                                  sendTransaction:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'personal_sendTransaction' },
                                  lockAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_lockAccount' },
                                  listAccounts: [Getter],
                                  getListAccounts: { [Function: get] request: [Function: bound ] } },
                               bzz:
                                Swarm {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  blockNetworkRead:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_blockNetworkRead' },
                                  syncEnabled:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_syncEnabled' },
                                  swapEnabled:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_swapEnabled' },
                                  download:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_download' },
                                  upload:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_upload' },
                                  retrieve:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_retrieve' },
                                  store:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_store' },
                                  get:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_get' },
                                  put:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_put' },
                                  modify:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_modify' },
                                  hive: [Getter],
                                  getHive: { [Function: get] request: [Function: bound ] },
                                  info: [Getter],
                                  getInfo: { [Function: get] request: [Function: bound ] } },
                               settings:
                                Settings { defaultBlock: 'latest', defaultAccount: undefined },
                               version:
                                { api: '0.20.6',
                                  node: [Getter],
                                  getNode: { [Function: get] request: [Function: bound ] },
                                  network: [Getter],
                                  getNetwork: { [Function: get] request: [Function: bound ] },
                                  ethereum: [Getter],
                                  getEthereum: { [Function: get] request: [Function: bound ] },
                                  whisper: [Getter],
                                  getWhisper: { [Function: get] request: [Function: bound ] } },
                               providers:
                                { HttpProvider: [Function: HttpProvider],
                                  IpcProvider: [Function: IpcProvider] },
                               _extend:
                                { [Function: ex]
                                  formatters:
                                   { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                                     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                                     inputCallFormatter: [Function: inputCallFormatter],
                                     inputTransactionFormatter: [Function: inputTransactionFormatter],
                                     inputAddressFormatter: [Function: inputAddressFormatter],
                                     inputPostFormatter: [Function: inputPostFormatter],
                                     outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                                     outputTransactionFormatter: [Function: outputTransactionFormatter],
                                     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                                     outputBlockFormatter: [Function: outputBlockFormatter],
                                     outputLogFormatter: [Function: outputLogFormatter],
                                     outputPostFormatter: [Function: outputPostFormatter],
                                     outputSyncingFormatter: [Function: outputSyncingFormatter] },
                                  utils:
                                   { padLeft: [Function: padLeft],
                                     padRight: [Function: padRight],
                                     toHex: [Function: toHex],
                                     toDecimal: [Function: toDecimal],
                                     fromDecimal: [Function: fromDecimal],
                                     toUtf8: [Function: toUtf8],
                                     toAscii: [Function: toAscii],
                                     fromUtf8: [Function: fromUtf8],
                                     fromAscii: [Function: fromAscii],
                                     transformToFullName: [Function: transformToFullName],
                                     extractDisplayName: [Function: extractDisplayName],
                                     extractTypeName: [Function: extractTypeName],
                                     toWei: [Function: toWei],
                                     fromWei: [Function: fromWei],
                                     toBigNumber: [Function: toBigNumber],
                                     toTwosComplement: [Function: toTwosComplement],
                                     toAddress: [Function: toAddress],
                                     isBigNumber: [Function: isBigNumber],
                                     isStrictAddress: [Function: isStrictAddress],
                                     isAddress: [Function: isAddress],
                                     isChecksumAddress: [Function: isChecksumAddress],
                                     toChecksumAddress: [Function: toChecksumAddress],
                                     isFunction: [Function: isFunction],
                                     isString: [Function: isString],
                                     isObject: [Function: isObject],
                                     isBoolean: [Function: isBoolean],
                                     isArray: [Function: isArray],
                                     isJson: [Function: isJson],
                                     isBloom: [Function: isBloom],
                                     isTopic: [Function: isTopic] },
                                  Method: [Function: Method],
                                  Property: [Function: Property] } },
                            class_defaults:
                             { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',
                               gas: 6721975,
                               gasPrice: 100000000000 },
                            currentProvider:
                             HttpProvider {
                               host: 'http://localhost:8545',
                               timeout: 0,
                               user: undefined,
                               password: undefined,
                               headers: undefined,
                               send: [Function],
                               sendAsync: [Function],
                               _alreadyWrapped: true },
                            network_id: '1544403995460' },
                         abi:
                          [ { constant: true,
                              inputs: [],
                              name: 'dontFail',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failWithRevert',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [ { name: '_reason', type: 'string' } ],
                              name: 'failWithRevertReason',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failWithThrow',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: false,
                              inputs: [],
                              name: 'failWithOutOfGas',
                              outputs: [],
                              payable: false,
                              stateMutability: 'nonpayable',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failRequirement',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failRequirementVocally',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' } ],
                         contract:
                          Contract {
                            _eth:
                             Eth {
                               _requestManager:
                                RequestManager {
                                  provider:
                                   Provider {
                                     provider:
                                      HttpProvider {
                                        host: 'http://localhost:8545',
                                        timeout: 0,
                                        user: undefined,
                                        password: undefined,
                                        headers: undefined,
                                        send: [Function],
                                        sendAsync: [Function],
                                        _alreadyWrapped: true } },
                                  polls: {},
                                  timeout: null },
                               getBalance:
                                { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                               getStorageAt:
                                { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                               getCode:
                                { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                               getBlock:
                                { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                               getUncle:
                                { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                               getCompilers:
                                { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                               getBlockTransactionCount:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: getBlockTransactionCountCall] },
                               getBlockUncleCount:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: uncleCountCall] },
                               getTransaction:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: 'eth_getTransactionByHash' },
                               getTransactionFromBlock:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: transactionFromBlockCall] },
                               getTransactionReceipt:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: 'eth_getTransactionReceipt' },
                               getTransactionCount:
                                { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                               call:
                                { [Function: send] request: [Function: bound ], call: 'eth_call' },
                               estimateGas:
                                { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                               sendRawTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                               signTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                               sendTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                               sign:
                                { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                               compile:
                                { solidity:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                  lll:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                  serpent:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                               submitWork:
                                { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                               getWork:
                                { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                               coinbase: [Getter],
                               getCoinbase: { [Function: get] request: [Function: bound ] },
                               mining: [Getter],
                               getMining: { [Function: get] request: [Function: bound ] },
                               hashrate: [Getter],
                               getHashrate: { [Function: get] request: [Function: bound ] },
                               syncing: [Getter],
                               getSyncing: { [Function: get] request: [Function: bound ] },
                               gasPrice: [Getter],
                               getGasPrice: { [Function: get] request: [Function: bound ] },
                               accounts: [Getter],
                               getAccounts: { [Function: get] request: [Function: bound ] },
                               blockNumber: [Getter],
                               getBlockNumber: { [Function: get] request: [Function: bound ] },
                               protocolVersion: [Getter],
                               getProtocolVersion: { [Function: get] request: [Function: bound ] },
                               iban:
                                { [Function: Iban]
                                  fromAddress: [Function],
                                  fromBban: [Function],
                                  createIndirect: [Function],
                                  isValid: [Function] },
                               sendIBANTransaction: [Function: bound transfer] },
                            transactionHash:
                             '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b',
                            address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                            abi:
                             [ { constant: true,
                                 inputs: [],
                                 name: 'dontFail',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failWithRevert',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [ { name: '_reason', type: 'string' } ],
                                 name: 'failWithRevertReason',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failWithThrow',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: false,
                                 inputs: [],
                                 name: 'failWithOutOfGas',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'nonpayable',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failRequirement',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failRequirementVocally',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' } ],
                            dontFail:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithRevert:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithRevertReason:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               string: [Circular] },
                            failWithThrow:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithOutOfGas:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failRequirement:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failRequirementVocally:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            allEvents: [Function: bound ] },
                         dontFail:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithRevert:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithRevertReason:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithThrow:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithOutOfGas:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failRequirement:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failRequirementVocally:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         sendTransaction: [Function],
                         send: [Function],
                         allEvents: [Function: bound ],
                         address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                         transactionHash:
                          '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b' } },
                   _events: [Object: null prototype] { error: [Function] },
                   _eventsCount: 1,
                   callback: [Function: done],
                   timer:
                    Timeout {
                      _idleTimeout: -1,
                      _idlePrev: null,
                      _idleNext: null,
                      _idleStart: 14602,
                      _onTimeout: null,
                      _timerArgs: undefined,
                      _repeat: null,
                      _destroyed: false,
                      [Symbol(refed)]: null,
                      [Symbol(asyncId)]: 2071,
                      [Symbol(triggerId)]: 2067 },
                   duration: 96,
                   _error: null } ],
              _beforeAll: [],
              _afterEach: [],
              _afterAll: [],
              root: false,
              _timeout: 2000,
              _enableTimeouts: true,
              _slow: 75,
              _bail: undefined,
              _retries: -1,
              _onlyTests: [],
              _onlySuites: [],
              delayed: false,
              parent:
               Suite {
                 title: '',
                 ctx: Context {},
                 suites: [ [Circular] ],
                 tests: [],
                 pending: false,
                 _beforeEach: [],
                 _beforeAll: [],
                 _afterEach: [],
                 _afterAll: [],
                 root: true,
                 _timeout: 2000,
                 _enableTimeouts: true,
                 _slow: 75,
                 _bail: undefined,
                 _retries: -1,
                 _onlyTests: [],
                 _onlySuites: [],
                 delayed: false,
                 _events:
                  [Object: null prototype] { 'pre-require': [ [Function], [Function] ] },
                 _eventsCount: 1 },
              file:
               '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
           file:
            '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
        file:
         '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
     ctx: [Circular],
     _events: [Object: null prototype] { error: [Function] },
     _eventsCount: 1,
     callback: [Function: done] },
  test:
   Test {
     title: 'accepts a revert with an expected reason',
     fn: [AsyncFunction],
     body:
      "async function () {\n        console.log(this)\n        await shouldFail.reverting.withMessage(this.failer.failWithRevertReason('Doomed to fail'), 'Doomed to fail');\n      }",
     async: 0,
     sync: true,
     _timeout: 2000,
     _slow: 75,
     _enableTimeouts: true,
     timedOut: false,
     _trace:
      Error: done() called multiple times
          at Test.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
          at new Test (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/test.js:28:12)
          at context.it.context.specify (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:86:18)
          at Function.context.it.only (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:97:46)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:68:10)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:63:5)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:46:3)
          at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
          at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
          at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
          at Module._compile (internal/modules/cjs/loader.js:722:30)
          at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
          at Module.load (internal/modules/cjs/loader.js:620:32)
          at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
          at Function.Module._load (internal/modules/cjs/loader.js:552:3)
          at Module.require (internal/modules/cjs/loader.js:658:17)
          at require (internal/modules/cjs/helpers.js:22:18)
          at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
          at Array.forEach (<anonymous>)
          at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
          at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
          at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
     _retries: -1,
     _currentRetry: 0,
     pending: false,
     type: 'test',
     file:
      '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js',
     parent:
      Suite {
        title: 'reverting.withMessage',
        ctx: [Circular],
        suites: [],
        tests: [ [Circular] ],
        pending: false,
        _beforeEach: [],
        _beforeAll: [],
        _afterEach: [],
        _afterAll: [],
        root: false,
        _timeout: 2000,
        _enableTimeouts: true,
        _slow: 75,
        _bail: undefined,
        _retries: -1,
        _onlyTests: [ [Circular] ],
        _onlySuites: [],
        delayed: false,
        parent:
         Suite {
           title: 'reverting',
           ctx: Context {},
           suites: [ [Circular] ],
           tests: [],
           pending: false,
           _beforeEach: [],
           _beforeAll: [],
           _afterEach: [],
           _afterAll: [],
           root: false,
           _timeout: 2000,
           _enableTimeouts: true,
           _slow: 75,
           _bail: undefined,
           _retries: -1,
           _onlyTests: [],
           _onlySuites: [],
           delayed: false,
           parent:
            Suite {
              title: 'shouldFail',
              ctx:
               Context {
                 _runnable:
                  Hook {
                    title: '"before each" hook',
                    fn: [AsyncFunction],
                    body:
                     'async function () {\n    this.failer = await Failer.new();\n  }',
                    async: 0,
                    sync: true,
                    _timeout: 2000,
                    _slow: 75,
                    _enableTimeouts: true,
                    timedOut: false,
                    _trace:
                     Error: done() called multiple times
                         at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                         at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                         at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                         at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                         at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                         at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                         at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                         at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                         at Module._compile (internal/modules/cjs/loader.js:722:30)
                         at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                         at Module.load (internal/modules/cjs/loader.js:620:32)
                         at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                         at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                         at Module.require (internal/modules/cjs/loader.js:658:17)
                         at require (internal/modules/cjs/helpers.js:22:18)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                         at Array.forEach (<anonymous>)
                         at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                         at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                    _retries: -1,
                    _currentRetry: 0,
                    pending: false,
                    type: 'hook',
                    parent: [Circular],
                    ctx: [Circular],
                    _events: [Object: null prototype] { error: [Function] },
                    _eventsCount: 1,
                    callback: [Function: done],
                    timer:
                     Timeout {
                       _idleTimeout: -1,
                       _idlePrev: null,
                       _idleNext: null,
                       _idleStart: 14602,
                       _onTimeout: null,
                       _timerArgs: undefined,
                       _repeat: null,
                       _destroyed: false,
                       [Symbol(refed)]: null,
                       [Symbol(asyncId)]: 2071,
                       [Symbol(triggerId)]: 2067 },
                    duration: 96,
                    _error: null },
                 test:
                  Hook {
                    title: '"before each" hook',
                    fn: [AsyncFunction],
                    body:
                     'async function () {\n    this.failer = await Failer.new();\n  }',
                    async: 0,
                    sync: true,
                    _timeout: 2000,
                    _slow: 75,
                    _enableTimeouts: true,
                    timedOut: false,
                    _trace:
                     Error: done() called multiple times
                         at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                         at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                         at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                         at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                         at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                         at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                         at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                         at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                         at Module._compile (internal/modules/cjs/loader.js:722:30)
                         at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                         at Module.load (internal/modules/cjs/loader.js:620:32)
                         at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                         at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                         at Module.require (internal/modules/cjs/loader.js:658:17)
                         at require (internal/modules/cjs/helpers.js:22:18)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                         at Array.forEach (<anonymous>)
                         at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                         at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                         at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                    _retries: -1,
                    _currentRetry: 0,
                    pending: false,
                    type: 'hook',
                    parent: [Circular],
                    ctx: [Circular],
                    _events: [Object: null prototype] { error: [Function] },
                    _eventsCount: 1,
                    callback: [Function: done],
                    timer:
                     Timeout {
                       _idleTimeout: -1,
                       _idlePrev: null,
                       _idleNext: null,
                       _idleStart: 14602,
                       _onTimeout: null,
                       _timerArgs: undefined,
                       _repeat: null,
                       _destroyed: false,
                       [Symbol(refed)]: null,
                       [Symbol(asyncId)]: 2071,
                       [Symbol(triggerId)]: 2067 },
                    duration: 96,
                    _error: null },
                 failer:
                  TruffleContract {
                    constructor:
                     { [Function: TruffleContract]
                       _static_methods:
                        { setProvider: [Function: setProvider],
                          new: [Function: new],
                          at: [Function: at],
                          deployed: [Function: deployed],
                          defaults: [Function: defaults],
                          hasNetwork: [Function: hasNetwork],
                          isDeployed: [Function: isDeployed],
                          detectNetwork: [Function: detectNetwork],
                          setNetwork: [Function: setNetwork],
                          resetAddress: [Function: resetAddress],
                          link: [Function: link],
                          clone: [Function: clone],
                          addProp: [Function: addProp],
                          toJSON: [Function: toJSON] },
                       _properties:
                        { contract_name: { get: [Function: get], set: [Function: set] },
                          contractName: { get: [Function: get], set: [Function: set] },
                          abi: { get: [Function: get], set: [Function: set] },
                          network: [Function: network],
                          networks: [Function: networks],
                          address: { get: [Function: get], set: [Function: set] },
                          transactionHash: { get: [Function: get], set: [Function: set] },
                          links: [Function: links],
                          events: [Function: events],
                          binary: [Function: binary],
                          deployedBinary: [Function: deployedBinary],
                          unlinked_binary: { get: [Function: get], set: [Function: set] },
                          bytecode: { get: [Function: get], set: [Function: set] },
                          deployedBytecode: { get: [Function: get], set: [Function: set] },
                          sourceMap: { get: [Function: get], set: [Function: set] },
                          deployedSourceMap: { get: [Function: get], set: [Function: set] },
                          source: { get: [Function: get], set: [Function: set] },
                          sourcePath: { get: [Function: get], set: [Function: set] },
                          legacyAST: { get: [Function: get], set: [Function: set] },
                          ast: { get: [Function: get], set: [Function: set] },
                          compiler: { get: [Function: get], set: [Function: set] },
                          schema_version: [Function: schema_version],
                          schemaVersion: [Function: schemaVersion],
                          updated_at: [Function: updated_at],
                          updatedAt: [Function: updatedAt] },
                       _property_values: {},
                       _json:
                        { contractName: 'Failer',
                          abi:
                           [ { constant: true,
                               inputs: [],
                               name: 'dontFail',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failWithRevert',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [ { name: '_reason', type: 'string' } ],
                               name: 'failWithRevertReason',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failWithThrow',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: false,
                               inputs: [],
                               name: 'failWithOutOfGas',
                               outputs: [],
                               payable: false,
                               stateMutability: 'nonpayable',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failRequirement',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' },
                             { constant: true,
                               inputs: [],
                               name: 'failRequirementVocally',
                               outputs: [],
                               payable: false,
                               stateMutability: 'pure',
                               type: 'function' } ],
                          bytecode:
                           '0x608060405234801561001057600080fd5b50610345806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                          deployedBytecode:
                           '0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                          sourceMap:
                           '26:637:56:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:637:56;;;;;;;',
                          deployedSourceMap:
                           '26:637:56:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:39:56;;;;;;192:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;192:90:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;493:70:56;;;;;;288:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;288:67:56;;;;;;361:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;361:126:56;;;;;;123:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;123:63:56;;;;;;569:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;569:92:56;;;;;;78:39;:::o;192:90::-;267:7;260:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;260:15:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;550:5;542:14;;;;;;;;493:70::o;288:67::-;342:5;335:13;;;;;;288:67::o;361:126::-;411:9;423:1;411:13;;406:75;430:6;426:1;:10;406:75;;;457:5;468:1;457:13;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;457:13:56;;;;;;;;;;;;;;;;;;;;;;438:3;;;;;406:75;;;361:126;:::o;123:63::-;171:8;;;569:92;633:5;625:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;569:92::o',
                          source:
                           'pragma solidity ^0.4.24;\n\ncontract Failer {\n    uint256[] private array;\n\n    function dontFail() public pure {\n    }\n\n    function failWithRevert() public pure {\n        revert();\n    }\n\n    function failWithRevertReason(string _reason) public pure {\n        revert(_reason);\n    }\n\n    function failWithThrow() public pure {\n        assert(false);\n    }\n\n    function failWithOutOfGas() public {\n        for (uint256 i = 0; i < 2**200; ++i) {\n            array.push(i);\n        }\n    }\n\n    function failRequirement() public pure {\n        require(false);\n    }\n\n    function failRequirementVocally() public pure {\n        require(false, "Unsatisfied");\n    }\n}\n',
                          sourcePath:
                           '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                          ast:
                           { absolutePath:
                              '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                             exportedSymbols: { Failer: [ 4245 ] },
                             id: 4246,
                             nodeType: 'SourceUnit',
                             nodes:
                              [ { id: 4171,
                                  literals: [ 'solidity', '^', '0.4', '.24' ],
                                  nodeType: 'PragmaDirective',
                                  src: '0:24:56' },
                                { baseContracts: [],
                                  contractDependencies: [],
                                  contractKind: 'contract',
                                  documentation: null,
                                  fullyImplemented: true,
                                  id: 4245,
                                  linearizedBaseContracts: [ 4245 ],
                                  name: 'Failer',
                                  nodeType: 'ContractDefinition',
                                  nodes:
                                   [ { constant: false,
                                       id: 4174,
                                       name: 'array',
                                       nodeType: 'VariableDeclaration',
                                       scope: 4245,
                                       src: '48:23:56',
                                       stateVariable: true,
                                       storageLocation: 'default',
                                       typeDescriptions:
                                        { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                          typeString: 'uint256[]' },
                                       typeName:
                                        { baseType:
                                           { id: 4172,
                                             name: 'uint256',
                                             nodeType: 'ElementaryTypeName',
                                             src: '48:7:56',
                                             typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                          id: 4173,
                                          length: null,
                                          nodeType: 'ArrayTypeName',
                                          src: '48:9:56',
                                          typeDescriptions:
                                           { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                             typeString: 'uint256[]' } },
                                       value: null,
                                       visibility: 'private' },
                                     { body:
                                        { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                       documentation: null,
                                       id: 4178,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'dontFail',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4175,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '95:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4176,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '110:0:56' },
                                       scope: 4245,
                                       src: '78:39:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4184,
                                          nodeType: 'Block',
                                          src: '161:25:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments: [],
                                                  expression:
                                                   { argumentTypes: [],
                                                     id: 4181,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8751,
                                                     src: '171:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$__$returns$__$',
                                                        typeString: 'function () pure' } },
                                                  id: 4182,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '171:8:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4183,
                                               nodeType: 'ExpressionStatement',
                                               src: '171:8:56' } ] },
                                       documentation: null,
                                       id: 4185,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevert',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4179,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '146:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4180,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '161:0:56' },
                                       scope: 4245,
                                       src: '123:63:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4194,
                                          nodeType: 'Block',
                                          src: '250:32:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       id: 4191,
                                                       name: '_reason',
                                                       nodeType: 'Identifier',
                                                       overloadedDeclarations: [],
                                                       referencedDeclaration: 4187,
                                                       src: '267:7:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } ],
                                                     id: 4190,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8752,
                                                     src: '260:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (string memory) pure' } },
                                                  id: 4192,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '260:15:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4193,
                                               nodeType: 'ExpressionStatement',
                                               src: '260:15:56' } ] },
                                       documentation: null,
                                       id: 4195,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevertReason',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4188,
                                          nodeType: 'ParameterList',
                                          parameters:
                                           [ { constant: false,
                                               id: 4187,
                                               name: '_reason',
                                               nodeType: 'VariableDeclaration',
                                               scope: 4195,
                                               src: '222:14:56',
                                               stateVariable: false,
                                               storageLocation: 'default',
                                               typeDescriptions:
                                                { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                               typeName:
                                                { id: 4186,
                                                  name: 'string',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '222:6:56',
                                                  typeDescriptions:
                                                   { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                               value: null,
                                               visibility: 'internal' } ],
                                          src: '221:16:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4189,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '250:0:56' },
                                       scope: 4245,
                                       src: '192:90:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4202,
                                          nodeType: 'Block',
                                          src: '325:30:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4199,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '342:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4198,
                                                     name: 'assert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 8735,
                                                     src: '335:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_assert_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4200,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '335:13:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4201,
                                               nodeType: 'ExpressionStatement',
                                               src: '335:13:56' } ] },
                                       documentation: null,
                                       id: 4203,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithThrow',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4196,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '310:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4197,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '325:0:56' },
                                       scope: 4245,
                                       src: '288:67:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4226,
                                          nodeType: 'Block',
                                          src: '396:91:56',
                                          statements:
                                           [ { body:
                                                { id: 4224,
                                                  nodeType: 'Block',
                                                  src: '443:38:56',
                                                  statements:
                                                   [ { expression:
                                                        { argumentTypes: null,
                                                          arguments: [Array],
                                                          expression: [Object],
                                                          id: 4222,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          kind: 'functionCall',
                                                          lValueRequested: false,
                                                          names: [],
                                                          nodeType: 'FunctionCall',
                                                          src: '457:13:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4223,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '457:13:56' } ] },
                                               condition:
                                                { argumentTypes: null,
                                                  commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                  id: 4214,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  lValueRequested: false,
                                                  leftExpression:
                                                   { argumentTypes: null,
                                                     id: 4210,
                                                     name: 'i',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 4207,
                                                     src: '426:1:56',
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  nodeType: 'BinaryOperation',
                                                  operator: '<',
                                                  rightExpression:
                                                   { argumentTypes: null,
                                                     commonType:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' },
                                                     id: 4213,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     lValueRequested: false,
                                                     leftExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '32',
                                                        id: 4211,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '430:1:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_2_by_1',
                                                           typeString: 'int_const 2' },
                                                        value: '2' },
                                                     nodeType: 'BinaryOperation',
                                                     operator: '**',
                                                     rightExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '323030',
                                                        id: 4212,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '433:3:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_200_by_1',
                                                           typeString: 'int_const 200' },
                                                        value: '200' },
                                                     src: '430:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' } },
                                                  src: '426:10:56',
                                                  typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                               id: 4225,
                                               initializationExpression:
                                                { assignments: [ 4207 ],
                                                  declarations:
                                                   [ { constant: false,
                                                       id: 4207,
                                                       name: 'i',
                                                       nodeType: 'VariableDeclaration',
                                                       scope: 4227,
                                                       src: '411:9:56',
                                                       stateVariable: false,
                                                       storageLocation: 'default',
                                                       typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       typeName:
                                                        { id: 4206,
                                                          name: 'uint256',
                                                          nodeType: 'ElementaryTypeName',
                                                          src: '411:7:56',
                                                          typeDescriptions: [Object] },
                                                       value: null,
                                                       visibility: 'internal' } ],
                                                  id: 4209,
                                                  initialValue:
                                                   { argumentTypes: null,
                                                     hexValue: '30',
                                                     id: 4208,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     kind: 'number',
                                                     lValueRequested: false,
                                                     nodeType: 'Literal',
                                                     src: '423:1:56',
                                                     subdenomination: null,
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_rational_0_by_1',
                                                        typeString: 'int_const 0' },
                                                     value: '0' },
                                                  nodeType: 'VariableDeclarationStatement',
                                                  src: '411:13:56' },
                                               loopExpression:
                                                { expression:
                                                   { argumentTypes: null,
                                                     id: 4216,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: false,
                                                     lValueRequested: false,
                                                     nodeType: 'UnaryOperation',
                                                     operator: '++',
                                                     prefix: true,
                                                     src: '438:3:56',
                                                     subExpression:
                                                      { argumentTypes: null,
                                                        id: 4215,
                                                        name: 'i',
                                                        nodeType: 'Identifier',
                                                        overloadedDeclarations: [],
                                                        referencedDeclaration: 4207,
                                                        src: '440:1:56',
                                                        typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  id: 4217,
                                                  nodeType: 'ExpressionStatement',
                                                  src: '438:3:56' },
                                               nodeType: 'ForStatement',
                                               src: '406:75:56' } ] },
                                       documentation: null,
                                       id: 4227,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: false,
                                       modifiers: [],
                                       name: 'failWithOutOfGas',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4204,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '386:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4205,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '396:0:56' },
                                       scope: 4245,
                                       src: '361:126:56',
                                       stateMutability: 'nonpayable',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4234,
                                          nodeType: 'Block',
                                          src: '532:31:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4231,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '550:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4230,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8749,
                                                     src: '542:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_require_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4232,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '542:14:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4233,
                                               nodeType: 'ExpressionStatement',
                                               src: '542:14:56' } ] },
                                       documentation: null,
                                       id: 4235,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirement',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4228,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '517:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4229,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '532:0:56' },
                                       scope: 4245,
                                       src: '493:70:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4243,
                                          nodeType: 'Block',
                                          src: '615:46:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4239,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '633:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' },
                                                     { argumentTypes: null,
                                                       hexValue: '556e736174697366696564',
                                                       id: 4240,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'string',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '640:13:56',
                                                       subdenomination: null,
                                                       typeDescriptions:
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' },
                                                       value: 'Unsatisfied' } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_bool', typeString: 'bool' },
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' } ],
                                                     id: 4238,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8750,
                                                     src: '625:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (bool,string memory) pure' } },
                                                  id: 4241,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '625:29:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4242,
                                               nodeType: 'ExpressionStatement',
                                               src: '625:29:56' } ] },
                                       documentation: null,
                                       id: 4244,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirementVocally',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4236,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '600:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4237,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '615:0:56' },
                                       scope: 4245,
                                       src: '569:92:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' } ],
                                  scope: 4246,
                                  src: '26:637:56' } ],
                             src: '0:664:56' },
                          legacyAST:
                           { absolutePath:
                              '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                             exportedSymbols: { Failer: [ 4245 ] },
                             id: 4246,
                             nodeType: 'SourceUnit',
                             nodes:
                              [ { id: 4171,
                                  literals: [ 'solidity', '^', '0.4', '.24' ],
                                  nodeType: 'PragmaDirective',
                                  src: '0:24:56' },
                                { baseContracts: [],
                                  contractDependencies: [],
                                  contractKind: 'contract',
                                  documentation: null,
                                  fullyImplemented: true,
                                  id: 4245,
                                  linearizedBaseContracts: [ 4245 ],
                                  name: 'Failer',
                                  nodeType: 'ContractDefinition',
                                  nodes:
                                   [ { constant: false,
                                       id: 4174,
                                       name: 'array',
                                       nodeType: 'VariableDeclaration',
                                       scope: 4245,
                                       src: '48:23:56',
                                       stateVariable: true,
                                       storageLocation: 'default',
                                       typeDescriptions:
                                        { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                          typeString: 'uint256[]' },
                                       typeName:
                                        { baseType:
                                           { id: 4172,
                                             name: 'uint256',
                                             nodeType: 'ElementaryTypeName',
                                             src: '48:7:56',
                                             typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                          id: 4173,
                                          length: null,
                                          nodeType: 'ArrayTypeName',
                                          src: '48:9:56',
                                          typeDescriptions:
                                           { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                             typeString: 'uint256[]' } },
                                       value: null,
                                       visibility: 'private' },
                                     { body:
                                        { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                       documentation: null,
                                       id: 4178,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'dontFail',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4175,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '95:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4176,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '110:0:56' },
                                       scope: 4245,
                                       src: '78:39:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4184,
                                          nodeType: 'Block',
                                          src: '161:25:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments: [],
                                                  expression:
                                                   { argumentTypes: [],
                                                     id: 4181,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8751,
                                                     src: '171:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$__$returns$__$',
                                                        typeString: 'function () pure' } },
                                                  id: 4182,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '171:8:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4183,
                                               nodeType: 'ExpressionStatement',
                                               src: '171:8:56' } ] },
                                       documentation: null,
                                       id: 4185,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevert',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4179,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '146:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4180,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '161:0:56' },
                                       scope: 4245,
                                       src: '123:63:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4194,
                                          nodeType: 'Block',
                                          src: '250:32:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       id: 4191,
                                                       name: '_reason',
                                                       nodeType: 'Identifier',
                                                       overloadedDeclarations: [],
                                                       referencedDeclaration: 4187,
                                                       src: '267:7:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_string_memory_ptr',
                                                          typeString: 'string memory' } ],
                                                     id: 4190,
                                                     name: 'revert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8751, 8752 ],
                                                     referencedDeclaration: 8752,
                                                     src: '260:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_revert_pure$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (string memory) pure' } },
                                                  id: 4192,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '260:15:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4193,
                                               nodeType: 'ExpressionStatement',
                                               src: '260:15:56' } ] },
                                       documentation: null,
                                       id: 4195,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithRevertReason',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4188,
                                          nodeType: 'ParameterList',
                                          parameters:
                                           [ { constant: false,
                                               id: 4187,
                                               name: '_reason',
                                               nodeType: 'VariableDeclaration',
                                               scope: 4195,
                                               src: '222:14:56',
                                               stateVariable: false,
                                               storageLocation: 'default',
                                               typeDescriptions:
                                                { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                               typeName:
                                                { id: 4186,
                                                  name: 'string',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '222:6:56',
                                                  typeDescriptions:
                                                   { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                               value: null,
                                               visibility: 'internal' } ],
                                          src: '221:16:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4189,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '250:0:56' },
                                       scope: 4245,
                                       src: '192:90:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4202,
                                          nodeType: 'Block',
                                          src: '325:30:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4199,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '342:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4198,
                                                     name: 'assert',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 8735,
                                                     src: '335:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_assert_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4200,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '335:13:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4201,
                                               nodeType: 'ExpressionStatement',
                                               src: '335:13:56' } ] },
                                       documentation: null,
                                       id: 4203,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failWithThrow',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4196,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '310:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4197,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '325:0:56' },
                                       scope: 4245,
                                       src: '288:67:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4226,
                                          nodeType: 'Block',
                                          src: '396:91:56',
                                          statements:
                                           [ { body:
                                                { id: 4224,
                                                  nodeType: 'Block',
                                                  src: '443:38:56',
                                                  statements:
                                                   [ { expression:
                                                        { argumentTypes: null,
                                                          arguments: [Array],
                                                          expression: [Object],
                                                          id: 4222,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          kind: 'functionCall',
                                                          lValueRequested: false,
                                                          names: [],
                                                          nodeType: 'FunctionCall',
                                                          src: '457:13:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4223,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '457:13:56' } ] },
                                               condition:
                                                { argumentTypes: null,
                                                  commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                  id: 4214,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  lValueRequested: false,
                                                  leftExpression:
                                                   { argumentTypes: null,
                                                     id: 4210,
                                                     name: 'i',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [],
                                                     referencedDeclaration: 4207,
                                                     src: '426:1:56',
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  nodeType: 'BinaryOperation',
                                                  operator: '<',
                                                  rightExpression:
                                                   { argumentTypes: null,
                                                     commonType:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' },
                                                     id: 4213,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     lValueRequested: false,
                                                     leftExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '32',
                                                        id: 4211,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '430:1:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_2_by_1',
                                                           typeString: 'int_const 2' },
                                                        value: '2' },
                                                     nodeType: 'BinaryOperation',
                                                     operator: '**',
                                                     rightExpression:
                                                      { argumentTypes: null,
                                                        hexValue: '323030',
                                                        id: 4212,
                                                        isConstant: false,
                                                        isLValue: false,
                                                        isPure: true,
                                                        kind: 'number',
                                                        lValueRequested: false,
                                                        nodeType: 'Literal',
                                                        src: '433:3:56',
                                                        subdenomination: null,
                                                        typeDescriptions:
                                                         { typeIdentifier: 't_rational_200_by_1',
                                                           typeString: 'int_const 200' },
                                                        value: '200' },
                                                     src: '430:6:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_rational_1606938044258990275541962092341162602522202993782792835301376_by_1',
                                                        typeString: 'int_const 1606...(53 digits omitted)...1376' } },
                                                  src: '426:10:56',
                                                  typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                               id: 4225,
                                               initializationExpression:
                                                { assignments: [ 4207 ],
                                                  declarations:
                                                   [ { constant: false,
                                                       id: 4207,
                                                       name: 'i',
                                                       nodeType: 'VariableDeclaration',
                                                       scope: 4227,
                                                       src: '411:9:56',
                                                       stateVariable: false,
                                                       storageLocation: 'default',
                                                       typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       typeName:
                                                        { id: 4206,
                                                          name: 'uint256',
                                                          nodeType: 'ElementaryTypeName',
                                                          src: '411:7:56',
                                                          typeDescriptions: [Object] },
                                                       value: null,
                                                       visibility: 'internal' } ],
                                                  id: 4209,
                                                  initialValue:
                                                   { argumentTypes: null,
                                                     hexValue: '30',
                                                     id: 4208,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: true,
                                                     kind: 'number',
                                                     lValueRequested: false,
                                                     nodeType: 'Literal',
                                                     src: '423:1:56',
                                                     subdenomination: null,
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_rational_0_by_1',
                                                        typeString: 'int_const 0' },
                                                     value: '0' },
                                                  nodeType: 'VariableDeclarationStatement',
                                                  src: '411:13:56' },
                                               loopExpression:
                                                { expression:
                                                   { argumentTypes: null,
                                                     id: 4216,
                                                     isConstant: false,
                                                     isLValue: false,
                                                     isPure: false,
                                                     lValueRequested: false,
                                                     nodeType: 'UnaryOperation',
                                                     operator: '++',
                                                     prefix: true,
                                                     src: '438:3:56',
                                                     subExpression:
                                                      { argumentTypes: null,
                                                        id: 4215,
                                                        name: 'i',
                                                        nodeType: 'Identifier',
                                                        overloadedDeclarations: [],
                                                        referencedDeclaration: 4207,
                                                        src: '440:1:56',
                                                        typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                     typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                                  id: 4217,
                                                  nodeType: 'ExpressionStatement',
                                                  src: '438:3:56' },
                                               nodeType: 'ForStatement',
                                               src: '406:75:56' } ] },
                                       documentation: null,
                                       id: 4227,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: false,
                                       modifiers: [],
                                       name: 'failWithOutOfGas',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4204,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '386:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4205,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '396:0:56' },
                                       scope: 4245,
                                       src: '361:126:56',
                                       stateMutability: 'nonpayable',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4234,
                                          nodeType: 'Block',
                                          src: '532:31:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4231,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '550:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' } ],
                                                  expression:
                                                   { argumentTypes: [ { typeIdentifier: 't_bool', typeString: 'bool' } ],
                                                     id: 4230,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8749,
                                                     src: '542:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier: 't_function_require_pure$_t_bool_$returns$__$',
                                                        typeString: 'function (bool) pure' } },
                                                  id: 4232,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '542:14:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4233,
                                               nodeType: 'ExpressionStatement',
                                               src: '542:14:56' } ] },
                                       documentation: null,
                                       id: 4235,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirement',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4228,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '517:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4229,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '532:0:56' },
                                       scope: 4245,
                                       src: '493:70:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' },
                                     { body:
                                        { id: 4243,
                                          nodeType: 'Block',
                                          src: '615:46:56',
                                          statements:
                                           [ { expression:
                                                { argumentTypes: null,
                                                  arguments:
                                                   [ { argumentTypes: null,
                                                       hexValue: '66616c7365',
                                                       id: 4239,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'bool',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '633:5:56',
                                                       subdenomination: null,
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' },
                                                       value: 'false' },
                                                     { argumentTypes: null,
                                                       hexValue: '556e736174697366696564',
                                                       id: 4240,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: true,
                                                       kind: 'string',
                                                       lValueRequested: false,
                                                       nodeType: 'Literal',
                                                       src: '640:13:56',
                                                       subdenomination: null,
                                                       typeDescriptions:
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' },
                                                       value: 'Unsatisfied' } ],
                                                  expression:
                                                   { argumentTypes:
                                                      [ { typeIdentifier: 't_bool', typeString: 'bool' },
                                                        { typeIdentifier:
                                                           't_stringliteral_4fc8ee628bb527abe63c48ebb626db10e344372f85995855248eeb12c04465db',
                                                          typeString: 'literal_string "Unsatisfied"' } ],
                                                     id: 4238,
                                                     name: 'require',
                                                     nodeType: 'Identifier',
                                                     overloadedDeclarations: [ 8749, 8750 ],
                                                     referencedDeclaration: 8750,
                                                     src: '625:7:56',
                                                     typeDescriptions:
                                                      { typeIdentifier:
                                                         't_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$',
                                                        typeString: 'function (bool,string memory) pure' } },
                                                  id: 4241,
                                                  isConstant: false,
                                                  isLValue: false,
                                                  isPure: false,
                                                  kind: 'functionCall',
                                                  lValueRequested: false,
                                                  names: [],
                                                  nodeType: 'FunctionCall',
                                                  src: '625:29:56',
                                                  typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                               id: 4242,
                                               nodeType: 'ExpressionStatement',
                                               src: '625:29:56' } ] },
                                       documentation: null,
                                       id: 4244,
                                       implemented: true,
                                       isConstructor: false,
                                       isDeclaredConst: true,
                                       modifiers: [],
                                       name: 'failRequirementVocally',
                                       nodeType: 'FunctionDefinition',
                                       parameters:
                                        { id: 4236,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '600:2:56' },
                                       payable: false,
                                       returnParameters:
                                        { id: 4237,
                                          nodeType: 'ParameterList',
                                          parameters: [],
                                          src: '615:0:56' },
                                       scope: 4245,
                                       src: '569:92:56',
                                       stateMutability: 'pure',
                                       superFunction: null,
                                       visibility: 'public' } ],
                                  scope: 4246,
                                  src: '26:637:56' } ],
                             src: '0:664:56' },
                          compiler:
                           { name: 'solc',
                             version: '0.4.24+commit.e67f0147.Emscripten.clang' },
                          networks: {},
                          schemaVersion: '2.0.1',
                          updatedAt: '2018-12-10T01:06:43.859Z' },
                       setProvider: [Function: bound setProvider],
                       new: [Function: bound new],
                       at: [Function: bound at],
                       deployed: [Function: bound deployed],
                       defaults: [Function: bound defaults],
                       hasNetwork: [Function: bound hasNetwork],
                       isDeployed: [Function: bound isDeployed],
                       detectNetwork: [Function: bound detectNetwork],
                       setNetwork: [Function: bound setNetwork],
                       resetAddress: [Function: bound resetAddress],
                       link: [Function: bound link],
                       clone: [Function: bound clone],
                       addProp: [Function: bound addProp],
                       toJSON: [Function: bound toJSON],
                       web3:
                        Web3 {
                          _requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:8545',
                                   timeout: 0,
                                   user: undefined,
                                   password: undefined,
                                   headers: undefined,
                                   send: [Function],
                                   sendAsync: [Function],
                                   _alreadyWrapped: true } },
                             polls: {},
                             timeout: null },
                          currentProvider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:8545',
                                timeout: 0,
                                user: undefined,
                                password: undefined,
                                headers: undefined,
                                send: [Function],
                                sendAsync: [Function],
                                _alreadyWrapped: true } },
                          eth:
                           Eth {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             getBalance:
                              { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                             getStorageAt:
                              { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                             getCode:
                              { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                             getBlock:
                              { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                             getUncle:
                              { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                             getCompilers:
                              { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                             getBlockTransactionCount:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: getBlockTransactionCountCall] },
                             getBlockUncleCount:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: uncleCountCall] },
                             getTransaction:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'eth_getTransactionByHash' },
                             getTransactionFromBlock:
                              { [Function: send]
                                request: [Function: bound ],
                                call: [Function: transactionFromBlockCall] },
                             getTransactionReceipt:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'eth_getTransactionReceipt' },
                             getTransactionCount:
                              { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                             call:
                              { [Function: send] request: [Function: bound ], call: 'eth_call' },
                             estimateGas:
                              { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                             sendRawTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                             signTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                             sendTransaction:
                              { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                             sign:
                              { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                             compile:
                              { solidity:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                lll:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                serpent:
                                 { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                             submitWork:
                              { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                             getWork:
                              { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                             coinbase: [Getter],
                             getCoinbase: { [Function: get] request: [Function: bound ] },
                             mining: [Getter],
                             getMining: { [Function: get] request: [Function: bound ] },
                             hashrate: [Getter],
                             getHashrate: { [Function: get] request: [Function: bound ] },
                             syncing: [Getter],
                             getSyncing: { [Function: get] request: [Function: bound ] },
                             gasPrice: [Getter],
                             getGasPrice: { [Function: get] request: [Function: bound ] },
                             accounts: [Getter],
                             getAccounts: { [Function: get] request: [Function: bound ] },
                             blockNumber: [Getter],
                             getBlockNumber: { [Function: get] request: [Function: bound ] },
                             protocolVersion: [Getter],
                             getProtocolVersion: { [Function: get] request: [Function: bound ] },
                             iban:
                              { [Function: Iban]
                                fromAddress: [Function],
                                fromBban: [Function],
                                createIndirect: [Function],
                                isValid: [Function] },
                             sendIBANTransaction: [Function: bound transfer] },
                          db:
                           DB {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             putString:
                              { [Function: send] request: [Function: bound ], call: 'db_putString' },
                             getString:
                              { [Function: send] request: [Function: bound ], call: 'db_getString' },
                             putHex:
                              { [Function: send] request: [Function: bound ], call: 'db_putHex' },
                             getHex:
                              { [Function: send] request: [Function: bound ], call: 'db_getHex' } },
                          shh:
                           Shh {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             version:
                              { [Function: send] request: [Function: bound ], call: 'shh_version' },
                             info:
                              { [Function: send] request: [Function: bound ], call: 'shh_info' },
                             setMaxMessageSize:
                              { [Function: send] request: [Function: bound ], call: 'shh_setMaxMessageSize' },
                             setMinPoW:
                              { [Function: send] request: [Function: bound ], call: 'shh_setMinPoW' },
                             markTrustedPeer:
                              { [Function: send] request: [Function: bound ], call: 'shh_markTrustedPeer' },
                             newKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_newKeyPair' },
                             addPrivateKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_addPrivateKey' },
                             deleteKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_deleteKeyPair' },
                             hasKeyPair:
                              { [Function: send] request: [Function: bound ], call: 'shh_hasKeyPair' },
                             getPublicKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getPublicKey' },
                             getPrivateKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getPrivateKey' },
                             newSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_newSymKey' },
                             addSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_addSymKey' },
                             generateSymKeyFromPassword:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'shh_generateSymKeyFromPassword' },
                             hasSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_hasSymKey' },
                             getSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_getSymKey' },
                             deleteSymKey:
                              { [Function: send] request: [Function: bound ], call: 'shh_deleteSymKey' },
                             post:
                              { [Function: send] request: [Function: bound ], call: 'shh_post' } },
                          net:
                           Net {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             listening: [Getter],
                             getListening: { [Function: get] request: [Function: bound ] },
                             peerCount: [Getter],
                             getPeerCount: { [Function: get] request: [Function: bound ] } },
                          personal:
                           Personal {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             newAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_newAccount' },
                             importRawKey:
                              { [Function: send] request: [Function: bound ], call: 'personal_importRawKey' },
                             unlockAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_unlockAccount' },
                             ecRecover:
                              { [Function: send] request: [Function: bound ], call: 'personal_ecRecover' },
                             sign:
                              { [Function: send] request: [Function: bound ], call: 'personal_sign' },
                             sendTransaction:
                              { [Function: send]
                                request: [Function: bound ],
                                call: 'personal_sendTransaction' },
                             lockAccount:
                              { [Function: send] request: [Function: bound ], call: 'personal_lockAccount' },
                             listAccounts: [Getter],
                             getListAccounts: { [Function: get] request: [Function: bound ] } },
                          bzz:
                           Swarm {
                             _requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:8545',
                                      timeout: 0,
                                      user: undefined,
                                      password: undefined,
                                      headers: undefined,
                                      send: [Function],
                                      sendAsync: [Function],
                                      _alreadyWrapped: true } },
                                polls: {},
                                timeout: null },
                             blockNetworkRead:
                              { [Function: send] request: [Function: bound ], call: 'bzz_blockNetworkRead' },
                             syncEnabled:
                              { [Function: send] request: [Function: bound ], call: 'bzz_syncEnabled' },
                             swapEnabled:
                              { [Function: send] request: [Function: bound ], call: 'bzz_swapEnabled' },
                             download:
                              { [Function: send] request: [Function: bound ], call: 'bzz_download' },
                             upload:
                              { [Function: send] request: [Function: bound ], call: 'bzz_upload' },
                             retrieve:
                              { [Function: send] request: [Function: bound ], call: 'bzz_retrieve' },
                             store:
                              { [Function: send] request: [Function: bound ], call: 'bzz_store' },
                             get:
                              { [Function: send] request: [Function: bound ], call: 'bzz_get' },
                             put:
                              { [Function: send] request: [Function: bound ], call: 'bzz_put' },
                             modify:
                              { [Function: send] request: [Function: bound ], call: 'bzz_modify' },
                             hive: [Getter],
                             getHive: { [Function: get] request: [Function: bound ] },
                             info: [Getter],
                             getInfo: { [Function: get] request: [Function: bound ] } },
                          settings:
                           Settings { defaultBlock: 'latest', defaultAccount: undefined },
                          version:
                           { api: '0.20.6',
                             node: [Getter],
                             getNode: { [Function: get] request: [Function: bound ] },
                             network: [Getter],
                             getNetwork: { [Function: get] request: [Function: bound ] },
                             ethereum: [Getter],
                             getEthereum: { [Function: get] request: [Function: bound ] },
                             whisper: [Getter],
                             getWhisper: { [Function: get] request: [Function: bound ] } },
                          providers:
                           { HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          _extend:
                           { [Function: ex]
                             formatters:
                              { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                                inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                                inputCallFormatter: [Function: inputCallFormatter],
                                inputTransactionFormatter: [Function: inputTransactionFormatter],
                                inputAddressFormatter: [Function: inputAddressFormatter],
                                inputPostFormatter: [Function: inputPostFormatter],
                                outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                                outputTransactionFormatter: [Function: outputTransactionFormatter],
                                outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                                outputBlockFormatter: [Function: outputBlockFormatter],
                                outputLogFormatter: [Function: outputLogFormatter],
                                outputPostFormatter: [Function: outputPostFormatter],
                                outputSyncingFormatter: [Function: outputSyncingFormatter] },
                             utils:
                              { padLeft: [Function: padLeft],
                                padRight: [Function: padRight],
                                toHex: [Function: toHex],
                                toDecimal: [Function: toDecimal],
                                fromDecimal: [Function: fromDecimal],
                                toUtf8: [Function: toUtf8],
                                toAscii: [Function: toAscii],
                                fromUtf8: [Function: fromUtf8],
                                fromAscii: [Function: fromAscii],
                                transformToFullName: [Function: transformToFullName],
                                extractDisplayName: [Function: extractDisplayName],
                                extractTypeName: [Function: extractTypeName],
                                toWei: [Function: toWei],
                                fromWei: [Function: fromWei],
                                toBigNumber: [Function: toBigNumber],
                                toTwosComplement: [Function: toTwosComplement],
                                toAddress: [Function: toAddress],
                                isBigNumber: [Function: isBigNumber],
                                isStrictAddress: [Function: isStrictAddress],
                                isAddress: [Function: isAddress],
                                isChecksumAddress: [Function: isChecksumAddress],
                                toChecksumAddress: [Function: toChecksumAddress],
                                isFunction: [Function: isFunction],
                                isString: [Function: isString],
                                isObject: [Function: isObject],
                                isBoolean: [Function: isBoolean],
                                isArray: [Function: isArray],
                                isJson: [Function: isJson],
                                isBloom: [Function: isBloom],
                                isTopic: [Function: isTopic] },
                             Method: [Function: Method],
                             Property: [Function: Property] } },
                       class_defaults:
                        { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',
                          gas: 6721975,
                          gasPrice: 100000000000 },
                       currentProvider:
                        HttpProvider {
                          host: 'http://localhost:8545',
                          timeout: 0,
                          user: undefined,
                          password: undefined,
                          headers: undefined,
                          send: [Function],
                          sendAsync: [Function],
                          _alreadyWrapped: true },
                       network_id: '1544403995460' },
                    abi:
                     [ { constant: true,
                         inputs: [],
                         name: 'dontFail',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failWithRevert',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [ { name: '_reason', type: 'string' } ],
                         name: 'failWithRevertReason',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failWithThrow',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: false,
                         inputs: [],
                         name: 'failWithOutOfGas',
                         outputs: [],
                         payable: false,
                         stateMutability: 'nonpayable',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failRequirement',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' },
                       { constant: true,
                         inputs: [],
                         name: 'failRequirementVocally',
                         outputs: [],
                         payable: false,
                         stateMutability: 'pure',
                         type: 'function' } ],
                    contract:
                     Contract {
                       _eth:
                        Eth {
                          _requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:8545',
                                   timeout: 0,
                                   user: undefined,
                                   password: undefined,
                                   headers: undefined,
                                   send: [Function],
                                   sendAsync: [Function],
                                   _alreadyWrapped: true } },
                             polls: {},
                             timeout: null },
                          getBalance:
                           { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                          getStorageAt:
                           { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                          getCode:
                           { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                          getBlock:
                           { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                          getUncle:
                           { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                          getCompilers:
                           { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                          getBlockTransactionCount:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: getBlockTransactionCountCall] },
                          getBlockUncleCount:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: uncleCountCall] },
                          getTransaction:
                           { [Function: send]
                             request: [Function: bound ],
                             call: 'eth_getTransactionByHash' },
                          getTransactionFromBlock:
                           { [Function: send]
                             request: [Function: bound ],
                             call: [Function: transactionFromBlockCall] },
                          getTransactionReceipt:
                           { [Function: send]
                             request: [Function: bound ],
                             call: 'eth_getTransactionReceipt' },
                          getTransactionCount:
                           { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                          call:
                           { [Function: send] request: [Function: bound ], call: 'eth_call' },
                          estimateGas:
                           { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                          sendRawTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                          signTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                          sendTransaction:
                           { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                          sign:
                           { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                          compile:
                           { solidity:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                             lll:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                             serpent:
                              { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                          submitWork:
                           { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                          getWork:
                           { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                          coinbase: [Getter],
                          getCoinbase: { [Function: get] request: [Function: bound ] },
                          mining: [Getter],
                          getMining: { [Function: get] request: [Function: bound ] },
                          hashrate: [Getter],
                          getHashrate: { [Function: get] request: [Function: bound ] },
                          syncing: [Getter],
                          getSyncing: { [Function: get] request: [Function: bound ] },
                          gasPrice: [Getter],
                          getGasPrice: { [Function: get] request: [Function: bound ] },
                          accounts: [Getter],
                          getAccounts: { [Function: get] request: [Function: bound ] },
                          blockNumber: [Getter],
                          getBlockNumber: { [Function: get] request: [Function: bound ] },
                          protocolVersion: [Getter],
                          getProtocolVersion: { [Function: get] request: [Function: bound ] },
                          iban:
                           { [Function: Iban]
                             fromAddress: [Function],
                             fromBban: [Function],
                             createIndirect: [Function],
                             isValid: [Function] },
                          sendIBANTransaction: [Function: bound transfer] },
                       transactionHash:
                        '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b',
                       address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                       abi:
                        [ { constant: true,
                            inputs: [],
                            name: 'dontFail',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failWithRevert',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [ { name: '_reason', type: 'string' } ],
                            name: 'failWithRevertReason',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failWithThrow',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: false,
                            inputs: [],
                            name: 'failWithOutOfGas',
                            outputs: [],
                            payable: false,
                            stateMutability: 'nonpayable',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failRequirement',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' },
                          { constant: true,
                            inputs: [],
                            name: 'failRequirementVocally',
                            outputs: [],
                            payable: false,
                            stateMutability: 'pure',
                            type: 'function' } ],
                       dontFail:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithRevert:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithRevertReason:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          string: [Circular] },
                       failWithThrow:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failWithOutOfGas:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failRequirement:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       failRequirementVocally:
                        { [Function: bound ]
                          request: [Function: bound ],
                          call: [Function: bound ],
                          sendTransaction: [Function: bound ],
                          estimateGas: [Function: bound ],
                          getData: [Function: bound ],
                          '': [Circular] },
                       allEvents: [Function: bound ] },
                    dontFail:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithRevert:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithRevertReason:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithThrow:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failWithOutOfGas:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failRequirement:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    failRequirementVocally:
                     { [Function]
                       call: [Function],
                       sendTransaction: [Function],
                       request: [Function: bound ],
                       estimateGas: [Function] },
                    sendTransaction: [Function],
                    send: [Function],
                    allEvents: [Function: bound ],
                    address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                    transactionHash:
                     '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b' } },
              suites: [ [Circular] ],
              tests: [],
              pending: false,
              _beforeEach:
               [ Hook {
                   title: '"before each" hook',
                   fn: [AsyncFunction],
                   body:
                    'async function () {\n    this.failer = await Failer.new();\n  }',
                   async: 0,
                   sync: true,
                   _timeout: 2000,
                   _slow: 75,
                   _enableTimeouts: true,
                   timedOut: false,
                   _trace:
                    Error: done() called multiple times
                        at Hook.Runnable (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/runnable.js:56:17)
                        at new Hook (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/hook.js:24:12)
                        at Suite.beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/suite.js:270:14)
                        at beforeEach (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:55:17)
                        at Suite.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:20:3)
                        at Object.create (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/common.js:112:19)
                        at context.describe.context.context (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/interfaces/bdd.js:44:27)
                        at Object.<anonymous> (/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js:19:1)
                        at Module._compile (internal/modules/cjs/loader.js:722:30)
                        at Object.Module._extensions..js (internal/modules/cjs/loader.js:733:10)
                        at Module.load (internal/modules/cjs/loader.js:620:32)
                        at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
                        at Function.Module._load (internal/modules/cjs/loader.js:552:3)
                        at Module.require (internal/modules/cjs/loader.js:658:17)
                        at require (internal/modules/cjs/helpers.js:22:18)
                        at /home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:231:27
                        at Array.forEach (<anonymous>)
                        at Mocha.loadFiles (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:228:14)
                        at Mocha.run (/home/mustang/Projects/openzeppelin-solidity/node_modules/mocha/lib/mocha.js:536:10)
                        at /home/mustang/Projects/openzeppelin-solidity/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:125:1,
                   _retries: -1,
                   _currentRetry: 0,
                   pending: false,
                   type: 'hook',
                   parent: [Circular],
                   ctx:
                    Context {
                      _runnable: [Circular],
                      test: [Circular],
                      failer:
                       TruffleContract {
                         constructor:
                          { [Function: TruffleContract]
                            _static_methods:
                             { setProvider: [Function: setProvider],
                               new: [Function: new],
                               at: [Function: at],
                               deployed: [Function: deployed],
                               defaults: [Function: defaults],
                               hasNetwork: [Function: hasNetwork],
                               isDeployed: [Function: isDeployed],
                               detectNetwork: [Function: detectNetwork],
                               setNetwork: [Function: setNetwork],
                               resetAddress: [Function: resetAddress],
                               link: [Function: link],
                               clone: [Function: clone],
                               addProp: [Function: addProp],
                               toJSON: [Function: toJSON] },
                            _properties:
                             { contract_name: { get: [Function: get], set: [Function: set] },
                               contractName: { get: [Function: get], set: [Function: set] },
                               abi: { get: [Function: get], set: [Function: set] },
                               network: [Function: network],
                               networks: [Function: networks],
                               address: { get: [Function: get], set: [Function: set] },
                               transactionHash: { get: [Function: get], set: [Function: set] },
                               links: [Function: links],
                               events: [Function: events],
                               binary: [Function: binary],
                               deployedBinary: [Function: deployedBinary],
                               unlinked_binary: { get: [Function: get], set: [Function: set] },
                               bytecode: { get: [Function: get], set: [Function: set] },
                               deployedBytecode: { get: [Function: get], set: [Function: set] },
                               sourceMap: { get: [Function: get], set: [Function: set] },
                               deployedSourceMap: { get: [Function: get], set: [Function: set] },
                               source: { get: [Function: get], set: [Function: set] },
                               sourcePath: { get: [Function: get], set: [Function: set] },
                               legacyAST: { get: [Function: get], set: [Function: set] },
                               ast: { get: [Function: get], set: [Function: set] },
                               compiler: { get: [Function: get], set: [Function: set] },
                               schema_version: [Function: schema_version],
                               schemaVersion: [Function: schemaVersion],
                               updated_at: [Function: updated_at],
                               updatedAt: [Function: updatedAt] },
                            _property_values: {},
                            _json:
                             { contractName: 'Failer',
                               abi:
                                [ { constant: true,
                                    inputs: [],
                                    name: 'dontFail',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failWithRevert',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [ { name: '_reason', type: 'string' } ],
                                    name: 'failWithRevertReason',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failWithThrow',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: false,
                                    inputs: [],
                                    name: 'failWithOutOfGas',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'nonpayable',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failRequirement',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' },
                                  { constant: true,
                                    inputs: [],
                                    name: 'failRequirementVocally',
                                    outputs: [],
                                    payable: false,
                                    stateMutability: 'pure',
                                    type: 'function' } ],
                               bytecode:
                                '0x608060405234801561001057600080fd5b50610345806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                               deployedBytecode:
                                '0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063679f63a114610088578063723bc70a1461009f57806383feea2d146101085780639ad8f1c41461011f578063e7c46bb714610136578063f050e4a51461014d578063f9d52ea614610164575b600080fd5b34801561009457600080fd5b5061009d61017b565b005b3480156100ab57600080fd5b50610106600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061017d565b005b34801561011457600080fd5b5061011d61021f565b005b34801561012b57600080fd5b5061013461022e565b005b34801561014257600080fd5b5061014b61023a565b005b34801561015957600080fd5b5061016261029c565b005b34801561017057600080fd5b506101796102a1565b005b565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101e45780820151818401526020810190506101c9565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000151561022c57600080fd5b565b6000151561023857fe5b565b60008090505b790100000000000000000000000000000000000000000000000000811015610299576000819080600181540180825580915050906001820390600052602060002001600090919290919091505550806001019050610240565b50565b600080fd5b60001515610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f556e73617469736669656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b5600a165627a7a72305820a866a4bc6530bca68b43f135bf6b7c1368cd2e96ff17e71e5de8d48016de83320029',
                               sourceMap:
                                '26:637:56:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:637:56;;;;;;;',
                               deployedSourceMap:
                                '26:637:56:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:39:56;;;;;;192:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;192:90:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;493:70:56;;;;;;288:67;;8:9:-1;5:2;;;30:1;27;20:12;5:2;288:67:56;;;;;;361:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;361:126:56;;;;;;123:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;123:63:56;;;;;;569:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;569:92:56;;;;;;78:39;:::o;192:90::-;267:7;260:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;260:15:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;493:70;550:5;542:14;;;;;;;;493:70::o;288:67::-;342:5;335:13;;;;;;288:67::o;361:126::-;411:9;423:1;411:13;;406:75;430:6;426:1;:10;406:75;;;457:5;468:1;457:13;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;457:13:56;;;;;;;;;;;;;;;;;;;;;;438:3;;;;;406:75;;;361:126;:::o;123:63::-;171:8;;;569:92;633:5;625:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;569:92::o',
                               source:
                                'pragma solidity ^0.4.24;\n\ncontract Failer {\n    uint256[] private array;\n\n    function dontFail() public pure {\n    }\n\n    function failWithRevert() public pure {\n        revert();\n    }\n\n    function failWithRevertReason(string _reason) public pure {\n        revert(_reason);\n    }\n\n    function failWithThrow() public pure {\n        assert(false);\n    }\n\n    function failWithOutOfGas() public {\n        for (uint256 i = 0; i < 2**200; ++i) {\n            array.push(i);\n        }\n    }\n\n    function failRequirement() public pure {\n        require(false);\n    }\n\n    function failRequirementVocally() public pure {\n        require(false, "Unsatisfied");\n    }\n}\n',
                               sourcePath:
                                '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                               ast:
                                { absolutePath:
                                   '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                                  exportedSymbols: { Failer: [ 4245 ] },
                                  id: 4246,
                                  nodeType: 'SourceUnit',
                                  nodes:
                                   [ { id: 4171,
                                       literals: [ 'solidity', '^', '0.4', '.24' ],
                                       nodeType: 'PragmaDirective',
                                       src: '0:24:56' },
                                     { baseContracts: [],
                                       contractDependencies: [],
                                       contractKind: 'contract',
                                       documentation: null,
                                       fullyImplemented: true,
                                       id: 4245,
                                       linearizedBaseContracts: [ 4245 ],
                                       name: 'Failer',
                                       nodeType: 'ContractDefinition',
                                       nodes:
                                        [ { constant: false,
                                            id: 4174,
                                            name: 'array',
                                            nodeType: 'VariableDeclaration',
                                            scope: 4245,
                                            src: '48:23:56',
                                            stateVariable: true,
                                            storageLocation: 'default',
                                            typeDescriptions:
                                             { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                               typeString: 'uint256[]' },
                                            typeName:
                                             { baseType:
                                                { id: 4172,
                                                  name: 'uint256',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '48:7:56',
                                                  typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                               id: 4173,
                                               length: null,
                                               nodeType: 'ArrayTypeName',
                                               src: '48:9:56',
                                               typeDescriptions:
                                                { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                                  typeString: 'uint256[]' } },
                                            value: null,
                                            visibility: 'private' },
                                          { body:
                                             { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                            documentation: null,
                                            id: 4178,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'dontFail',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4175,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '95:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4176,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '110:0:56' },
                                            scope: 4245,
                                            src: '78:39:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4184,
                                               nodeType: 'Block',
                                               src: '161:25:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [],
                                                       expression:
                                                        { argumentTypes: [],
                                                          id: 4181,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8751,
                                                          src: '171:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4182,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '171:8:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4183,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '171:8:56' } ] },
                                            documentation: null,
                                            id: 4185,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevert',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4179,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '146:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4180,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '161:0:56' },
                                            scope: 4245,
                                            src: '123:63:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4194,
                                               nodeType: 'Block',
                                               src: '250:32:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4190,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8752,
                                                          src: '260:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4192,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '260:15:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4193,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '260:15:56' } ] },
                                            documentation: null,
                                            id: 4195,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevertReason',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4188,
                                               nodeType: 'ParameterList',
                                               parameters:
                                                [ { constant: false,
                                                    id: 4187,
                                                    name: '_reason',
                                                    nodeType: 'VariableDeclaration',
                                                    scope: 4195,
                                                    src: '222:14:56',
                                                    stateVariable: false,
                                                    storageLocation: 'default',
                                                    typeDescriptions:
                                                     { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                                    typeName:
                                                     { id: 4186,
                                                       name: 'string',
                                                       nodeType: 'ElementaryTypeName',
                                                       src: '222:6:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                                    value: null,
                                                    visibility: 'internal' } ],
                                               src: '221:16:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4189,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '250:0:56' },
                                            scope: 4245,
                                            src: '192:90:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4202,
                                               nodeType: 'Block',
                                               src: '325:30:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4198,
                                                          name: 'assert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 8735,
                                                          src: '335:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4200,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '335:13:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4201,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '335:13:56' } ] },
                                            documentation: null,
                                            id: 4203,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithThrow',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4196,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '310:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4197,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '325:0:56' },
                                            scope: 4245,
                                            src: '288:67:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4226,
                                               nodeType: 'Block',
                                               src: '396:91:56',
                                               statements:
                                                [ { body:
                                                     { id: 4224,
                                                       nodeType: 'Block',
                                                       src: '443:38:56',
                                                       statements: [ [Object] ] },
                                                    condition:
                                                     { argumentTypes: null,
                                                       commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       id: 4214,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       lValueRequested: false,
                                                       leftExpression:
                                                        { argumentTypes: null,
                                                          id: 4210,
                                                          name: 'i',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 4207,
                                                          src: '426:1:56',
                                                          typeDescriptions: [Object] },
                                                       nodeType: 'BinaryOperation',
                                                       operator: '<',
                                                       rightExpression:
                                                        { argumentTypes: null,
                                                          commonType: [Object],
                                                          id: 4213,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          lValueRequested: false,
                                                          leftExpression: [Object],
                                                          nodeType: 'BinaryOperation',
                                                          operator: '**',
                                                          rightExpression: [Object],
                                                          src: '430:6:56',
                                                          typeDescriptions: [Object] },
                                                       src: '426:10:56',
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                                    id: 4225,
                                                    initializationExpression:
                                                     { assignments: [ 4207 ],
                                                       declarations: [ [Object] ],
                                                       id: 4209,
                                                       initialValue:
                                                        { argumentTypes: null,
                                                          hexValue: '30',
                                                          id: 4208,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          kind: 'number',
                                                          lValueRequested: false,
                                                          nodeType: 'Literal',
                                                          src: '423:1:56',
                                                          subdenomination: null,
                                                          typeDescriptions: [Object],
                                                          value: '0' },
                                                       nodeType: 'VariableDeclarationStatement',
                                                       src: '411:13:56' },
                                                    loopExpression:
                                                     { expression:
                                                        { argumentTypes: null,
                                                          id: 4216,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          lValueRequested: false,
                                                          nodeType: 'UnaryOperation',
                                                          operator: '++',
                                                          prefix: true,
                                                          src: '438:3:56',
                                                          subExpression: [Object],
                                                          typeDescriptions: [Object] },
                                                       id: 4217,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '438:3:56' },
                                                    nodeType: 'ForStatement',
                                                    src: '406:75:56' } ] },
                                            documentation: null,
                                            id: 4227,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: false,
                                            modifiers: [],
                                            name: 'failWithOutOfGas',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4204,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '386:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4205,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '396:0:56' },
                                            scope: 4245,
                                            src: '361:126:56',
                                            stateMutability: 'nonpayable',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4234,
                                               nodeType: 'Block',
                                               src: '532:31:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4230,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8749,
                                                          src: '542:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4232,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '542:14:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4233,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '542:14:56' } ] },
                                            documentation: null,
                                            id: 4235,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirement',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4228,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '517:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4229,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '532:0:56' },
                                            scope: 4245,
                                            src: '493:70:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4243,
                                               nodeType: 'Block',
                                               src: '615:46:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object], [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4238,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8750,
                                                          src: '625:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4241,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '625:29:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4242,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '625:29:56' } ] },
                                            documentation: null,
                                            id: 4244,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirementVocally',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4236,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '600:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4237,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '615:0:56' },
                                            scope: 4245,
                                            src: '569:92:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' } ],
                                       scope: 4246,
                                       src: '26:637:56' } ],
                                  src: '0:664:56' },
                               legacyAST:
                                { absolutePath:
                                   '/home/mustang/Projects/openzeppelin-solidity/contracts/mocks/Failer.sol',
                                  exportedSymbols: { Failer: [ 4245 ] },
                                  id: 4246,
                                  nodeType: 'SourceUnit',
                                  nodes:
                                   [ { id: 4171,
                                       literals: [ 'solidity', '^', '0.4', '.24' ],
                                       nodeType: 'PragmaDirective',
                                       src: '0:24:56' },
                                     { baseContracts: [],
                                       contractDependencies: [],
                                       contractKind: 'contract',
                                       documentation: null,
                                       fullyImplemented: true,
                                       id: 4245,
                                       linearizedBaseContracts: [ 4245 ],
                                       name: 'Failer',
                                       nodeType: 'ContractDefinition',
                                       nodes:
                                        [ { constant: false,
                                            id: 4174,
                                            name: 'array',
                                            nodeType: 'VariableDeclaration',
                                            scope: 4245,
                                            src: '48:23:56',
                                            stateVariable: true,
                                            storageLocation: 'default',
                                            typeDescriptions:
                                             { typeIdentifier: 't_array$_t_uint256_$dyn_storage',
                                               typeString: 'uint256[]' },
                                            typeName:
                                             { baseType:
                                                { id: 4172,
                                                  name: 'uint256',
                                                  nodeType: 'ElementaryTypeName',
                                                  src: '48:7:56',
                                                  typeDescriptions: { typeIdentifier: 't_uint256', typeString: 'uint256' } },
                                               id: 4173,
                                               length: null,
                                               nodeType: 'ArrayTypeName',
                                               src: '48:9:56',
                                               typeDescriptions:
                                                { typeIdentifier: 't_array$_t_uint256_$dyn_storage_ptr',
                                                  typeString: 'uint256[]' } },
                                            value: null,
                                            visibility: 'private' },
                                          { body:
                                             { id: 4177, nodeType: 'Block', src: '110:7:56', statements: [] },
                                            documentation: null,
                                            id: 4178,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'dontFail',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4175,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '95:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4176,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '110:0:56' },
                                            scope: 4245,
                                            src: '78:39:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4184,
                                               nodeType: 'Block',
                                               src: '161:25:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [],
                                                       expression:
                                                        { argumentTypes: [],
                                                          id: 4181,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8751,
                                                          src: '171:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4182,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '171:8:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4183,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '171:8:56' } ] },
                                            documentation: null,
                                            id: 4185,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevert',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4179,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '146:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4180,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '161:0:56' },
                                            scope: 4245,
                                            src: '123:63:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4194,
                                               nodeType: 'Block',
                                               src: '250:32:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4190,
                                                          name: 'revert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8752,
                                                          src: '260:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4192,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '260:15:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4193,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '260:15:56' } ] },
                                            documentation: null,
                                            id: 4195,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithRevertReason',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4188,
                                               nodeType: 'ParameterList',
                                               parameters:
                                                [ { constant: false,
                                                    id: 4187,
                                                    name: '_reason',
                                                    nodeType: 'VariableDeclaration',
                                                    scope: 4195,
                                                    src: '222:14:56',
                                                    stateVariable: false,
                                                    storageLocation: 'default',
                                                    typeDescriptions:
                                                     { typeIdentifier: 't_string_memory_ptr', typeString: 'string' },
                                                    typeName:
                                                     { id: 4186,
                                                       name: 'string',
                                                       nodeType: 'ElementaryTypeName',
                                                       src: '222:6:56',
                                                       typeDescriptions:
                                                        { typeIdentifier: 't_string_storage_ptr', typeString: 'string' } },
                                                    value: null,
                                                    visibility: 'internal' } ],
                                               src: '221:16:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4189,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '250:0:56' },
                                            scope: 4245,
                                            src: '192:90:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4202,
                                               nodeType: 'Block',
                                               src: '325:30:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4198,
                                                          name: 'assert',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 8735,
                                                          src: '335:6:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4200,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '335:13:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4201,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '335:13:56' } ] },
                                            documentation: null,
                                            id: 4203,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failWithThrow',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4196,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '310:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4197,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '325:0:56' },
                                            scope: 4245,
                                            src: '288:67:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4226,
                                               nodeType: 'Block',
                                               src: '396:91:56',
                                               statements:
                                                [ { body:
                                                     { id: 4224,
                                                       nodeType: 'Block',
                                                       src: '443:38:56',
                                                       statements: [ [Object] ] },
                                                    condition:
                                                     { argumentTypes: null,
                                                       commonType: { typeIdentifier: 't_uint256', typeString: 'uint256' },
                                                       id: 4214,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       lValueRequested: false,
                                                       leftExpression:
                                                        { argumentTypes: null,
                                                          id: 4210,
                                                          name: 'i',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [],
                                                          referencedDeclaration: 4207,
                                                          src: '426:1:56',
                                                          typeDescriptions: [Object] },
                                                       nodeType: 'BinaryOperation',
                                                       operator: '<',
                                                       rightExpression:
                                                        { argumentTypes: null,
                                                          commonType: [Object],
                                                          id: 4213,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          lValueRequested: false,
                                                          leftExpression: [Object],
                                                          nodeType: 'BinaryOperation',
                                                          operator: '**',
                                                          rightExpression: [Object],
                                                          src: '430:6:56',
                                                          typeDescriptions: [Object] },
                                                       src: '426:10:56',
                                                       typeDescriptions: { typeIdentifier: 't_bool', typeString: 'bool' } },
                                                    id: 4225,
                                                    initializationExpression:
                                                     { assignments: [ 4207 ],
                                                       declarations: [ [Object] ],
                                                       id: 4209,
                                                       initialValue:
                                                        { argumentTypes: null,
                                                          hexValue: '30',
                                                          id: 4208,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: true,
                                                          kind: 'number',
                                                          lValueRequested: false,
                                                          nodeType: 'Literal',
                                                          src: '423:1:56',
                                                          subdenomination: null,
                                                          typeDescriptions: [Object],
                                                          value: '0' },
                                                       nodeType: 'VariableDeclarationStatement',
                                                       src: '411:13:56' },
                                                    loopExpression:
                                                     { expression:
                                                        { argumentTypes: null,
                                                          id: 4216,
                                                          isConstant: false,
                                                          isLValue: false,
                                                          isPure: false,
                                                          lValueRequested: false,
                                                          nodeType: 'UnaryOperation',
                                                          operator: '++',
                                                          prefix: true,
                                                          src: '438:3:56',
                                                          subExpression: [Object],
                                                          typeDescriptions: [Object] },
                                                       id: 4217,
                                                       nodeType: 'ExpressionStatement',
                                                       src: '438:3:56' },
                                                    nodeType: 'ForStatement',
                                                    src: '406:75:56' } ] },
                                            documentation: null,
                                            id: 4227,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: false,
                                            modifiers: [],
                                            name: 'failWithOutOfGas',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4204,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '386:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4205,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '396:0:56' },
                                            scope: 4245,
                                            src: '361:126:56',
                                            stateMutability: 'nonpayable',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4234,
                                               nodeType: 'Block',
                                               src: '532:31:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4230,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8749,
                                                          src: '542:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4232,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '542:14:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4233,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '542:14:56' } ] },
                                            documentation: null,
                                            id: 4235,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirement',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4228,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '517:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4229,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '532:0:56' },
                                            scope: 4245,
                                            src: '493:70:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' },
                                          { body:
                                             { id: 4243,
                                               nodeType: 'Block',
                                               src: '615:46:56',
                                               statements:
                                                [ { expression:
                                                     { argumentTypes: null,
                                                       arguments: [ [Object], [Object] ],
                                                       expression:
                                                        { argumentTypes: [Array],
                                                          id: 4238,
                                                          name: 'require',
                                                          nodeType: 'Identifier',
                                                          overloadedDeclarations: [Array],
                                                          referencedDeclaration: 8750,
                                                          src: '625:7:56',
                                                          typeDescriptions: [Object] },
                                                       id: 4241,
                                                       isConstant: false,
                                                       isLValue: false,
                                                       isPure: false,
                                                       kind: 'functionCall',
                                                       lValueRequested: false,
                                                       names: [],
                                                       nodeType: 'FunctionCall',
                                                       src: '625:29:56',
                                                       typeDescriptions: { typeIdentifier: 't_tuple$__$', typeString: 'tuple()' } },
                                                    id: 4242,
                                                    nodeType: 'ExpressionStatement',
                                                    src: '625:29:56' } ] },
                                            documentation: null,
                                            id: 4244,
                                            implemented: true,
                                            isConstructor: false,
                                            isDeclaredConst: true,
                                            modifiers: [],
                                            name: 'failRequirementVocally',
                                            nodeType: 'FunctionDefinition',
                                            parameters:
                                             { id: 4236,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '600:2:56' },
                                            payable: false,
                                            returnParameters:
                                             { id: 4237,
                                               nodeType: 'ParameterList',
                                               parameters: [],
                                               src: '615:0:56' },
                                            scope: 4245,
                                            src: '569:92:56',
                                            stateMutability: 'pure',
                                            superFunction: null,
                                            visibility: 'public' } ],
                                       scope: 4246,
                                       src: '26:637:56' } ],
                                  src: '0:664:56' },
                               compiler:
                                { name: 'solc',
                                  version: '0.4.24+commit.e67f0147.Emscripten.clang' },
                               networks: {},
                               schemaVersion: '2.0.1',
                               updatedAt: '2018-12-10T01:06:43.859Z' },
                            setProvider: [Function: bound setProvider],
                            new: [Function: bound new],
                            at: [Function: bound at],
                            deployed: [Function: bound deployed],
                            defaults: [Function: bound defaults],
                            hasNetwork: [Function: bound hasNetwork],
                            isDeployed: [Function: bound isDeployed],
                            detectNetwork: [Function: bound detectNetwork],
                            setNetwork: [Function: bound setNetwork],
                            resetAddress: [Function: bound resetAddress],
                            link: [Function: bound link],
                            clone: [Function: bound clone],
                            addProp: [Function: bound addProp],
                            toJSON: [Function: bound toJSON],
                            web3:
                             Web3 {
                               _requestManager:
                                RequestManager {
                                  provider:
                                   Provider {
                                     provider:
                                      HttpProvider {
                                        host: 'http://localhost:8545',
                                        timeout: 0,
                                        user: undefined,
                                        password: undefined,
                                        headers: undefined,
                                        send: [Function],
                                        sendAsync: [Function],
                                        _alreadyWrapped: true } },
                                  polls: {},
                                  timeout: null },
                               currentProvider:
                                Provider {
                                  provider:
                                   HttpProvider {
                                     host: 'http://localhost:8545',
                                     timeout: 0,
                                     user: undefined,
                                     password: undefined,
                                     headers: undefined,
                                     send: [Function],
                                     sendAsync: [Function],
                                     _alreadyWrapped: true } },
                               eth:
                                Eth {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  getBalance:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                                  getStorageAt:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                                  getCode:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                                  getBlock:
                                   { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                                  getUncle:
                                   { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                                  getCompilers:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                                  getBlockTransactionCount:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: getBlockTransactionCountCall] },
                                  getBlockUncleCount:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: uncleCountCall] },
                                  getTransaction:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'eth_getTransactionByHash' },
                                  getTransactionFromBlock:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: [Function: transactionFromBlockCall] },
                                  getTransactionReceipt:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'eth_getTransactionReceipt' },
                                  getTransactionCount:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                                  call:
                                   { [Function: send] request: [Function: bound ], call: 'eth_call' },
                                  estimateGas:
                                   { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                                  sendRawTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                                  signTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                                  sendTransaction:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                                  sign:
                                   { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                                  compile:
                                   { solidity:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                     lll:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                     serpent:
                                      { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                                  submitWork:
                                   { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                                  getWork:
                                   { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                                  coinbase: [Getter],
                                  getCoinbase: { [Function: get] request: [Function: bound ] },
                                  mining: [Getter],
                                  getMining: { [Function: get] request: [Function: bound ] },
                                  hashrate: [Getter],
                                  getHashrate: { [Function: get] request: [Function: bound ] },
                                  syncing: [Getter],
                                  getSyncing: { [Function: get] request: [Function: bound ] },
                                  gasPrice: [Getter],
                                  getGasPrice: { [Function: get] request: [Function: bound ] },
                                  accounts: [Getter],
                                  getAccounts: { [Function: get] request: [Function: bound ] },
                                  blockNumber: [Getter],
                                  getBlockNumber: { [Function: get] request: [Function: bound ] },
                                  protocolVersion: [Getter],
                                  getProtocolVersion: { [Function: get] request: [Function: bound ] },
                                  iban:
                                   { [Function: Iban]
                                     fromAddress: [Function],
                                     fromBban: [Function],
                                     createIndirect: [Function],
                                     isValid: [Function] },
                                  sendIBANTransaction: [Function: bound transfer] },
                               db:
                                DB {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  putString:
                                   { [Function: send] request: [Function: bound ], call: 'db_putString' },
                                  getString:
                                   { [Function: send] request: [Function: bound ], call: 'db_getString' },
                                  putHex:
                                   { [Function: send] request: [Function: bound ], call: 'db_putHex' },
                                  getHex:
                                   { [Function: send] request: [Function: bound ], call: 'db_getHex' } },
                               shh:
                                Shh {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  version:
                                   { [Function: send] request: [Function: bound ], call: 'shh_version' },
                                  info:
                                   { [Function: send] request: [Function: bound ], call: 'shh_info' },
                                  setMaxMessageSize:
                                   { [Function: send] request: [Function: bound ], call: 'shh_setMaxMessageSize' },
                                  setMinPoW:
                                   { [Function: send] request: [Function: bound ], call: 'shh_setMinPoW' },
                                  markTrustedPeer:
                                   { [Function: send] request: [Function: bound ], call: 'shh_markTrustedPeer' },
                                  newKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_newKeyPair' },
                                  addPrivateKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_addPrivateKey' },
                                  deleteKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_deleteKeyPair' },
                                  hasKeyPair:
                                   { [Function: send] request: [Function: bound ], call: 'shh_hasKeyPair' },
                                  getPublicKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getPublicKey' },
                                  getPrivateKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getPrivateKey' },
                                  newSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_newSymKey' },
                                  addSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_addSymKey' },
                                  generateSymKeyFromPassword:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'shh_generateSymKeyFromPassword' },
                                  hasSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_hasSymKey' },
                                  getSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_getSymKey' },
                                  deleteSymKey:
                                   { [Function: send] request: [Function: bound ], call: 'shh_deleteSymKey' },
                                  post:
                                   { [Function: send] request: [Function: bound ], call: 'shh_post' } },
                               net:
                                Net {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  listening: [Getter],
                                  getListening: { [Function: get] request: [Function: bound ] },
                                  peerCount: [Getter],
                                  getPeerCount: { [Function: get] request: [Function: bound ] } },
                               personal:
                                Personal {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  newAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_newAccount' },
                                  importRawKey:
                                   { [Function: send] request: [Function: bound ], call: 'personal_importRawKey' },
                                  unlockAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_unlockAccount' },
                                  ecRecover:
                                   { [Function: send] request: [Function: bound ], call: 'personal_ecRecover' },
                                  sign:
                                   { [Function: send] request: [Function: bound ], call: 'personal_sign' },
                                  sendTransaction:
                                   { [Function: send]
                                     request: [Function: bound ],
                                     call: 'personal_sendTransaction' },
                                  lockAccount:
                                   { [Function: send] request: [Function: bound ], call: 'personal_lockAccount' },
                                  listAccounts: [Getter],
                                  getListAccounts: { [Function: get] request: [Function: bound ] } },
                               bzz:
                                Swarm {
                                  _requestManager:
                                   RequestManager {
                                     provider:
                                      Provider {
                                        provider:
                                         HttpProvider {
                                           host: 'http://localhost:8545',
                                           timeout: 0,
                                           user: undefined,
                                           password: undefined,
                                           headers: undefined,
                                           send: [Function],
                                           sendAsync: [Function],
                                           _alreadyWrapped: true } },
                                     polls: {},
                                     timeout: null },
                                  blockNetworkRead:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_blockNetworkRead' },
                                  syncEnabled:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_syncEnabled' },
                                  swapEnabled:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_swapEnabled' },
                                  download:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_download' },
                                  upload:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_upload' },
                                  retrieve:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_retrieve' },
                                  store:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_store' },
                                  get:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_get' },
                                  put:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_put' },
                                  modify:
                                   { [Function: send] request: [Function: bound ], call: 'bzz_modify' },
                                  hive: [Getter],
                                  getHive: { [Function: get] request: [Function: bound ] },
                                  info: [Getter],
                                  getInfo: { [Function: get] request: [Function: bound ] } },
                               settings:
                                Settings { defaultBlock: 'latest', defaultAccount: undefined },
                               version:
                                { api: '0.20.6',
                                  node: [Getter],
                                  getNode: { [Function: get] request: [Function: bound ] },
                                  network: [Getter],
                                  getNetwork: { [Function: get] request: [Function: bound ] },
                                  ethereum: [Getter],
                                  getEthereum: { [Function: get] request: [Function: bound ] },
                                  whisper: [Getter],
                                  getWhisper: { [Function: get] request: [Function: bound ] } },
                               providers:
                                { HttpProvider: [Function: HttpProvider],
                                  IpcProvider: [Function: IpcProvider] },
                               _extend:
                                { [Function: ex]
                                  formatters:
                                   { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                                     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                                     inputCallFormatter: [Function: inputCallFormatter],
                                     inputTransactionFormatter: [Function: inputTransactionFormatter],
                                     inputAddressFormatter: [Function: inputAddressFormatter],
                                     inputPostFormatter: [Function: inputPostFormatter],
                                     outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                                     outputTransactionFormatter: [Function: outputTransactionFormatter],
                                     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                                     outputBlockFormatter: [Function: outputBlockFormatter],
                                     outputLogFormatter: [Function: outputLogFormatter],
                                     outputPostFormatter: [Function: outputPostFormatter],
                                     outputSyncingFormatter: [Function: outputSyncingFormatter] },
                                  utils:
                                   { padLeft: [Function: padLeft],
                                     padRight: [Function: padRight],
                                     toHex: [Function: toHex],
                                     toDecimal: [Function: toDecimal],
                                     fromDecimal: [Function: fromDecimal],
                                     toUtf8: [Function: toUtf8],
                                     toAscii: [Function: toAscii],
                                     fromUtf8: [Function: fromUtf8],
                                     fromAscii: [Function: fromAscii],
                                     transformToFullName: [Function: transformToFullName],
                                     extractDisplayName: [Function: extractDisplayName],
                                     extractTypeName: [Function: extractTypeName],
                                     toWei: [Function: toWei],
                                     fromWei: [Function: fromWei],
                                     toBigNumber: [Function: toBigNumber],
                                     toTwosComplement: [Function: toTwosComplement],
                                     toAddress: [Function: toAddress],
                                     isBigNumber: [Function: isBigNumber],
                                     isStrictAddress: [Function: isStrictAddress],
                                     isAddress: [Function: isAddress],
                                     isChecksumAddress: [Function: isChecksumAddress],
                                     toChecksumAddress: [Function: toChecksumAddress],
                                     isFunction: [Function: isFunction],
                                     isString: [Function: isString],
                                     isObject: [Function: isObject],
                                     isBoolean: [Function: isBoolean],
                                     isArray: [Function: isArray],
                                     isJson: [Function: isJson],
                                     isBloom: [Function: isBloom],
                                     isTopic: [Function: isTopic] },
                                  Method: [Function: Method],
                                  Property: [Function: Property] } },
                            class_defaults:
                             { from: '0xdf08f82de32b8d460adbe8d72043e3a7e25a3b39',
                               gas: 6721975,
                               gasPrice: 100000000000 },
                            currentProvider:
                             HttpProvider {
                               host: 'http://localhost:8545',
                               timeout: 0,
                               user: undefined,
                               password: undefined,
                               headers: undefined,
                               send: [Function],
                               sendAsync: [Function],
                               _alreadyWrapped: true },
                            network_id: '1544403995460' },
                         abi:
                          [ { constant: true,
                              inputs: [],
                              name: 'dontFail',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failWithRevert',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [ { name: '_reason', type: 'string' } ],
                              name: 'failWithRevertReason',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failWithThrow',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: false,
                              inputs: [],
                              name: 'failWithOutOfGas',
                              outputs: [],
                              payable: false,
                              stateMutability: 'nonpayable',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failRequirement',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' },
                            { constant: true,
                              inputs: [],
                              name: 'failRequirementVocally',
                              outputs: [],
                              payable: false,
                              stateMutability: 'pure',
                              type: 'function' } ],
                         contract:
                          Contract {
                            _eth:
                             Eth {
                               _requestManager:
                                RequestManager {
                                  provider:
                                   Provider {
                                     provider:
                                      HttpProvider {
                                        host: 'http://localhost:8545',
                                        timeout: 0,
                                        user: undefined,
                                        password: undefined,
                                        headers: undefined,
                                        send: [Function],
                                        sendAsync: [Function],
                                        _alreadyWrapped: true } },
                                  polls: {},
                                  timeout: null },
                               getBalance:
                                { [Function: send] request: [Function: bound ], call: 'eth_getBalance' },
                               getStorageAt:
                                { [Function: send] request: [Function: bound ], call: 'eth_getStorageAt' },
                               getCode:
                                { [Function: send] request: [Function: bound ], call: 'eth_getCode' },
                               getBlock:
                                { [Function: send] request: [Function: bound ], call: [Function: blockCall] },
                               getUncle:
                                { [Function: send] request: [Function: bound ], call: [Function: uncleCall] },
                               getCompilers:
                                { [Function: send] request: [Function: bound ], call: 'eth_getCompilers' },
                               getBlockTransactionCount:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: getBlockTransactionCountCall] },
                               getBlockUncleCount:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: uncleCountCall] },
                               getTransaction:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: 'eth_getTransactionByHash' },
                               getTransactionFromBlock:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: [Function: transactionFromBlockCall] },
                               getTransactionReceipt:
                                { [Function: send]
                                  request: [Function: bound ],
                                  call: 'eth_getTransactionReceipt' },
                               getTransactionCount:
                                { [Function: send] request: [Function: bound ], call: 'eth_getTransactionCount' },
                               call:
                                { [Function: send] request: [Function: bound ], call: 'eth_call' },
                               estimateGas:
                                { [Function: send] request: [Function: bound ], call: 'eth_estimateGas' },
                               sendRawTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_sendRawTransaction' },
                               signTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_signTransaction' },
                               sendTransaction:
                                { [Function: send] request: [Function: bound ], call: 'eth_sendTransaction' },
                               sign:
                                { [Function: send] request: [Function: bound ], call: 'eth_sign' },
                               compile:
                                { solidity:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileSolidity' },
                                  lll:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileLLL' },
                                  serpent:
                                   { [Function: send] request: [Function: bound ], call: 'eth_compileSerpent' } },
                               submitWork:
                                { [Function: send] request: [Function: bound ], call: 'eth_submitWork' },
                               getWork:
                                { [Function: send] request: [Function: bound ], call: 'eth_getWork' },
                               coinbase: [Getter],
                               getCoinbase: { [Function: get] request: [Function: bound ] },
                               mining: [Getter],
                               getMining: { [Function: get] request: [Function: bound ] },
                               hashrate: [Getter],
                               getHashrate: { [Function: get] request: [Function: bound ] },
                               syncing: [Getter],
                               getSyncing: { [Function: get] request: [Function: bound ] },
                               gasPrice: [Getter],
                               getGasPrice: { [Function: get] request: [Function: bound ] },
                               accounts: [Getter],
                               getAccounts: { [Function: get] request: [Function: bound ] },
                               blockNumber: [Getter],
                               getBlockNumber: { [Function: get] request: [Function: bound ] },
                               protocolVersion: [Getter],
                               getProtocolVersion: { [Function: get] request: [Function: bound ] },
                               iban:
                                { [Function: Iban]
                                  fromAddress: [Function],
                                  fromBban: [Function],
                                  createIndirect: [Function],
                                  isValid: [Function] },
                               sendIBANTransaction: [Function: bound transfer] },
                            transactionHash:
                             '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b',
                            address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                            abi:
                             [ { constant: true,
                                 inputs: [],
                                 name: 'dontFail',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failWithRevert',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [ { name: '_reason', type: 'string' } ],
                                 name: 'failWithRevertReason',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failWithThrow',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: false,
                                 inputs: [],
                                 name: 'failWithOutOfGas',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'nonpayable',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failRequirement',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' },
                               { constant: true,
                                 inputs: [],
                                 name: 'failRequirementVocally',
                                 outputs: [],
                                 payable: false,
                                 stateMutability: 'pure',
                                 type: 'function' } ],
                            dontFail:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithRevert:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithRevertReason:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               string: [Circular] },
                            failWithThrow:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failWithOutOfGas:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failRequirement:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            failRequirementVocally:
                             { [Function: bound ]
                               request: [Function: bound ],
                               call: [Function: bound ],
                               sendTransaction: [Function: bound ],
                               estimateGas: [Function: bound ],
                               getData: [Function: bound ],
                               '': [Circular] },
                            allEvents: [Function: bound ] },
                         dontFail:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithRevert:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithRevertReason:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithThrow:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failWithOutOfGas:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failRequirement:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         failRequirementVocally:
                          { [Function]
                            call: [Function],
                            sendTransaction: [Function],
                            request: [Function: bound ],
                            estimateGas: [Function] },
                         sendTransaction: [Function],
                         send: [Function],
                         allEvents: [Function: bound ],
                         address: '0x0f5ea0a652e851678ebf77b69484bfcd31f9459b',
                         transactionHash:
                          '0x16f87eed083d02fd877e49a18a485a27e9bde52d396f8939f630157a4106087b' } },
                   _events: [Object: null prototype] { error: [Function] },
                   _eventsCount: 1,
                   callback: [Function: done],
                   timer:
                    Timeout {
                      _idleTimeout: -1,
                      _idlePrev: null,
                      _idleNext: null,
                      _idleStart: 14602,
                      _onTimeout: null,
                      _timerArgs: undefined,
                      _repeat: null,
                      _destroyed: false,
                      [Symbol(refed)]: null,
                      [Symbol(asyncId)]: 2071,
                      [Symbol(triggerId)]: 2067 },
                   duration: 96,
                   _error: null } ],
              _beforeAll: [],
              _afterEach: [],
              _afterAll: [],
              root: false,
              _timeout: 2000,
              _enableTimeouts: true,
              _slow: 75,
              _bail: undefined,
              _retries: -1,
              _onlyTests: [],
              _onlySuites: [],
              delayed: false,
              parent:
               Suite {
                 title: '',
                 ctx: Context {},
                 suites: [ [Circular] ],
                 tests: [],
                 pending: false,
                 _beforeEach: [],
                 _beforeAll: [],
                 _afterEach: [],
                 _afterAll: [],
                 root: true,
                 _timeout: 2000,
                 _enableTimeouts: true,
                 _slow: 75,
                 _bail: undefined,
                 _retries: -1,
                 _onlyTests: [],
                 _onlySuites: [],
                 delayed: false,
                 _events:
                  [Object: null prototype] { 'pre-require': [ [Function], [Function] ] },
                 _eventsCount: 1 },
              file:
               '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
           file:
            '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
        file:
         '/home/mustang/Projects/openzeppelin-solidity/test/helpers/test/shouldFail.test.js' },
     ctx: [Circular],
     _events: [Object: null prototype] { error: [Function] },
     _eventsCount: 1,
     callback: [Function: done] } }
withMessage Promise { <pending> } Doomed to fail
      [31m  1) accepts a revert with an expected reason[0m


[92m [0m[32m 0 passing[0m[90m (168ms)[0m
[31m  1 failing[0m

[0m  1) shouldFail
       reverting
         reverting.withMessage
           accepts a revert with an expected reason:
[0m[31m     Uncaught Error: VM Exception while processing transaction: revert Doomed to fail[0m[90m
      at Object.InvalidResponse (node_modules/truffle/build/webpack:/~/web3/lib/web3/errors.js:38:1)
      at node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:86:1
      at node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:134:1
      at XMLHttpRequest.request.onreadystatechange (node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)
      at XMLHttpRequestEventTarget.dispatchEvent (node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)
      at XMLHttpRequest._setReadyState (node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)
      at XMLHttpRequest._onHttpResponseEnd (node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)
      at IncomingMessage.<anonymous> (node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)
      at endReadableNT (_stream_readable.js:1098:12)
      at process.internalTickCallback (internal/process/next_tick.js:72:19)
[0m


